/******************************************************************************
* The MIT License (MIT)
*
* Copyright (c) 2020-2021 Baldur Karlsson
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
******************************************************************************/

/******************************************************************************
* The MIT License (MIT)
*
* Copyright (c) 2022-2023 xiongya
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
******************************************************************************/

/******************************************************************************
* Generated from Khronos's vk.xml:

* Copyright 2015-2022 The Khronos Group Inc.
* 
* SPDX-License-Identifier: Apache-2.0 OR MIT
* 
* This file, vk.xml, is the Vulkan API Registry. It is a critically important
* and normative part of the Vulkan Specification, including a canonical
* machine-readable definition of the API, parameter and member validation
* language incorporated into the Specification and reference pages, and other
* material which is registered by Khronos, such as tags used by extension and
* layer authors. The authoritative public version of vk.xml is maintained in
* the default branch (currently named main) of the Khronos Vulkan GitHub
* project. The authoritative private version is maintained in the default
* branch of the member gitlab server.
* 

******************************************************************************/
// This file is autogenerated with vk_xml_parser.py - any changes will be overwritten next time
// that script is run.
// $ ./vk_xml_parser.py

#pragma once

// this file is autogenerated, so don't worry about clang-format issues
// clang-format off
//Instance api
	// VK_VERSION_1_0
#define vkCreateInstance_define \
     (vkCreateInstance, VkResult, (VkInstanceCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkInstance * pInstance),                \
     (vkCreateInstance, VkResult, VkInstanceCreateInfo const*, VkAllocationCallbacks const*, VkInstance *),\
     (vkCreateInstance, VkResult, pCreateInfo, pAllocator, pInstance) )


#define vkDestroyInstance_define \
     (vkDestroyInstance, void, (VkInstance  instance, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyInstance, void, VkInstance , VkAllocationCallbacks const*),\
     (vkDestroyInstance, void, instance, pAllocator) )


#define vkEnumeratePhysicalDevices_define \
     (vkEnumeratePhysicalDevices, VkResult, (VkInstance  instance, uint32_t * pPhysicalDeviceCount, VkPhysicalDevice * pPhysicalDevices),                \
     (vkEnumeratePhysicalDevices, VkResult, VkInstance , uint32_t *, VkPhysicalDevice *),\
     (vkEnumeratePhysicalDevices, VkResult, instance, pPhysicalDeviceCount, pPhysicalDevices) )


#define vkGetPhysicalDeviceFeatures_define \
     (vkGetPhysicalDeviceFeatures, void, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceFeatures * pFeatures),                \
     (vkGetPhysicalDeviceFeatures, void, VkPhysicalDevice , VkPhysicalDeviceFeatures *),\
     (vkGetPhysicalDeviceFeatures, void, physicalDevice, pFeatures) )


#define vkGetPhysicalDeviceFormatProperties_define \
     (vkGetPhysicalDeviceFormatProperties, void, (VkPhysicalDevice  physicalDevice, VkFormat  format, VkFormatProperties * pFormatProperties),                \
     (vkGetPhysicalDeviceFormatProperties, void, VkPhysicalDevice , VkFormat , VkFormatProperties *),\
     (vkGetPhysicalDeviceFormatProperties, void, physicalDevice, format, pFormatProperties) )


#define vkGetPhysicalDeviceImageFormatProperties_define \
     (vkGetPhysicalDeviceImageFormatProperties, VkResult, (VkPhysicalDevice  physicalDevice, VkFormat  format, VkImageType  type, VkImageTiling  tiling, VkImageUsageFlags  usage, VkImageCreateFlags  flags, VkImageFormatProperties * pImageFormatProperties),                \
     (vkGetPhysicalDeviceImageFormatProperties, VkResult, VkPhysicalDevice , VkFormat , VkImageType , VkImageTiling , VkImageUsageFlags , VkImageCreateFlags , VkImageFormatProperties *),\
     (vkGetPhysicalDeviceImageFormatProperties, VkResult, physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties) )


#define vkGetPhysicalDeviceProperties_define \
     (vkGetPhysicalDeviceProperties, void, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceProperties * pProperties),                \
     (vkGetPhysicalDeviceProperties, void, VkPhysicalDevice , VkPhysicalDeviceProperties *),\
     (vkGetPhysicalDeviceProperties, void, physicalDevice, pProperties) )


#define vkGetPhysicalDeviceQueueFamilyProperties_define \
     (vkGetPhysicalDeviceQueueFamilyProperties, void, (VkPhysicalDevice  physicalDevice, uint32_t * pQueueFamilyPropertyCount, VkQueueFamilyProperties * pQueueFamilyProperties),                \
     (vkGetPhysicalDeviceQueueFamilyProperties, void, VkPhysicalDevice , uint32_t *, VkQueueFamilyProperties *),\
     (vkGetPhysicalDeviceQueueFamilyProperties, void, physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) )


#define vkGetPhysicalDeviceMemoryProperties_define \
     (vkGetPhysicalDeviceMemoryProperties, void, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceMemoryProperties * pMemoryProperties),                \
     (vkGetPhysicalDeviceMemoryProperties, void, VkPhysicalDevice , VkPhysicalDeviceMemoryProperties *),\
     (vkGetPhysicalDeviceMemoryProperties, void, physicalDevice, pMemoryProperties) )


#define vkGetInstanceProcAddr_define \
     (vkGetInstanceProcAddr, PFN_vkVoidFunction, (VkInstance  instance, char const* pName),                \
     (vkGetInstanceProcAddr, PFN_vkVoidFunction, VkInstance , char const*),\
     (vkGetInstanceProcAddr, PFN_vkVoidFunction, instance, pName) )


#define vkCreateDevice_define \
     (vkCreateDevice, VkResult, (VkPhysicalDevice  physicalDevice, VkDeviceCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkDevice * pDevice),                \
     (vkCreateDevice, VkResult, VkPhysicalDevice , VkDeviceCreateInfo const*, VkAllocationCallbacks const*, VkDevice *),\
     (vkCreateDevice, VkResult, physicalDevice, pCreateInfo, pAllocator, pDevice) )


#define vkEnumerateInstanceExtensionProperties_define \
     (vkEnumerateInstanceExtensionProperties, VkResult, (char const* pLayerName, uint32_t * pPropertyCount, VkExtensionProperties * pProperties),                \
     (vkEnumerateInstanceExtensionProperties, VkResult, char const*, uint32_t *, VkExtensionProperties *),\
     (vkEnumerateInstanceExtensionProperties, VkResult, pLayerName, pPropertyCount, pProperties) )


#define vkEnumerateDeviceExtensionProperties_define \
     (vkEnumerateDeviceExtensionProperties, VkResult, (VkPhysicalDevice  physicalDevice, char const* pLayerName, uint32_t * pPropertyCount, VkExtensionProperties * pProperties),                \
     (vkEnumerateDeviceExtensionProperties, VkResult, VkPhysicalDevice , char const*, uint32_t *, VkExtensionProperties *),\
     (vkEnumerateDeviceExtensionProperties, VkResult, physicalDevice, pLayerName, pPropertyCount, pProperties) )


#define vkEnumerateInstanceLayerProperties_define \
     (vkEnumerateInstanceLayerProperties, VkResult, (uint32_t * pPropertyCount, VkLayerProperties * pProperties),                \
     (vkEnumerateInstanceLayerProperties, VkResult, uint32_t *, VkLayerProperties *),\
     (vkEnumerateInstanceLayerProperties, VkResult, pPropertyCount, pProperties) )


#define vkEnumerateDeviceLayerProperties_define \
     (vkEnumerateDeviceLayerProperties, VkResult, (VkPhysicalDevice  physicalDevice, uint32_t * pPropertyCount, VkLayerProperties * pProperties),                \
     (vkEnumerateDeviceLayerProperties, VkResult, VkPhysicalDevice , uint32_t *, VkLayerProperties *),\
     (vkEnumerateDeviceLayerProperties, VkResult, physicalDevice, pPropertyCount, pProperties) )


#define vkGetPhysicalDeviceSparseImageFormatProperties_define \
     (vkGetPhysicalDeviceSparseImageFormatProperties, void, (VkPhysicalDevice  physicalDevice, VkFormat  format, VkImageType  type, VkSampleCountFlagBits  samples, VkImageUsageFlags  usage, VkImageTiling  tiling, uint32_t * pPropertyCount, VkSparseImageFormatProperties * pProperties),                \
     (vkGetPhysicalDeviceSparseImageFormatProperties, void, VkPhysicalDevice , VkFormat , VkImageType , VkSampleCountFlagBits , VkImageUsageFlags , VkImageTiling , uint32_t *, VkSparseImageFormatProperties *),\
     (vkGetPhysicalDeviceSparseImageFormatProperties, void, physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties) )



	// VK_VERSION_1_1
#define vkEnumerateInstanceVersion_define \
     (vkEnumerateInstanceVersion, VkResult, (uint32_t * pApiVersion),                \
     (vkEnumerateInstanceVersion, VkResult, uint32_t *),\
     (vkEnumerateInstanceVersion, VkResult, pApiVersion) )


#define vkEnumeratePhysicalDeviceGroups_define \
     (vkEnumeratePhysicalDeviceGroups, VkResult, (VkInstance  instance, uint32_t * pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties * pPhysicalDeviceGroupProperties),                \
     (vkEnumeratePhysicalDeviceGroups, VkResult, VkInstance , uint32_t *, VkPhysicalDeviceGroupProperties *),\
     (vkEnumeratePhysicalDeviceGroups, VkResult, instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties) )


#define vkGetPhysicalDeviceFeatures2_define \
     (vkGetPhysicalDeviceFeatures2, void, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceFeatures2 * pFeatures),                \
     (vkGetPhysicalDeviceFeatures2, void, VkPhysicalDevice , VkPhysicalDeviceFeatures2 *),\
     (vkGetPhysicalDeviceFeatures2, void, physicalDevice, pFeatures) )


#define vkGetPhysicalDeviceProperties2_define \
     (vkGetPhysicalDeviceProperties2, void, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceProperties2 * pProperties),                \
     (vkGetPhysicalDeviceProperties2, void, VkPhysicalDevice , VkPhysicalDeviceProperties2 *),\
     (vkGetPhysicalDeviceProperties2, void, physicalDevice, pProperties) )


#define vkGetPhysicalDeviceFormatProperties2_define \
     (vkGetPhysicalDeviceFormatProperties2, void, (VkPhysicalDevice  physicalDevice, VkFormat  format, VkFormatProperties2 * pFormatProperties),                \
     (vkGetPhysicalDeviceFormatProperties2, void, VkPhysicalDevice , VkFormat , VkFormatProperties2 *),\
     (vkGetPhysicalDeviceFormatProperties2, void, physicalDevice, format, pFormatProperties) )


#define vkGetPhysicalDeviceImageFormatProperties2_define \
     (vkGetPhysicalDeviceImageFormatProperties2, VkResult, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceImageFormatInfo2 const* pImageFormatInfo, VkImageFormatProperties2 * pImageFormatProperties),                \
     (vkGetPhysicalDeviceImageFormatProperties2, VkResult, VkPhysicalDevice , VkPhysicalDeviceImageFormatInfo2 const*, VkImageFormatProperties2 *),\
     (vkGetPhysicalDeviceImageFormatProperties2, VkResult, physicalDevice, pImageFormatInfo, pImageFormatProperties) )


#define vkGetPhysicalDeviceQueueFamilyProperties2_define \
     (vkGetPhysicalDeviceQueueFamilyProperties2, void, (VkPhysicalDevice  physicalDevice, uint32_t * pQueueFamilyPropertyCount, VkQueueFamilyProperties2 * pQueueFamilyProperties),                \
     (vkGetPhysicalDeviceQueueFamilyProperties2, void, VkPhysicalDevice , uint32_t *, VkQueueFamilyProperties2 *),\
     (vkGetPhysicalDeviceQueueFamilyProperties2, void, physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) )


#define vkGetPhysicalDeviceMemoryProperties2_define \
     (vkGetPhysicalDeviceMemoryProperties2, void, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceMemoryProperties2 * pMemoryProperties),                \
     (vkGetPhysicalDeviceMemoryProperties2, void, VkPhysicalDevice , VkPhysicalDeviceMemoryProperties2 *),\
     (vkGetPhysicalDeviceMemoryProperties2, void, physicalDevice, pMemoryProperties) )


#define vkGetPhysicalDeviceSparseImageFormatProperties2_define \
     (vkGetPhysicalDeviceSparseImageFormatProperties2, void, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2 const* pFormatInfo, uint32_t * pPropertyCount, VkSparseImageFormatProperties2 * pProperties),                \
     (vkGetPhysicalDeviceSparseImageFormatProperties2, void, VkPhysicalDevice , VkPhysicalDeviceSparseImageFormatInfo2 const*, uint32_t *, VkSparseImageFormatProperties2 *),\
     (vkGetPhysicalDeviceSparseImageFormatProperties2, void, physicalDevice, pFormatInfo, pPropertyCount, pProperties) )


#define vkGetPhysicalDeviceExternalBufferProperties_define \
     (vkGetPhysicalDeviceExternalBufferProperties, void, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceExternalBufferInfo const* pExternalBufferInfo, VkExternalBufferProperties * pExternalBufferProperties),                \
     (vkGetPhysicalDeviceExternalBufferProperties, void, VkPhysicalDevice , VkPhysicalDeviceExternalBufferInfo const*, VkExternalBufferProperties *),\
     (vkGetPhysicalDeviceExternalBufferProperties, void, physicalDevice, pExternalBufferInfo, pExternalBufferProperties) )


#define vkGetPhysicalDeviceExternalFenceProperties_define \
     (vkGetPhysicalDeviceExternalFenceProperties, void, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceExternalFenceInfo const* pExternalFenceInfo, VkExternalFenceProperties * pExternalFenceProperties),                \
     (vkGetPhysicalDeviceExternalFenceProperties, void, VkPhysicalDevice , VkPhysicalDeviceExternalFenceInfo const*, VkExternalFenceProperties *),\
     (vkGetPhysicalDeviceExternalFenceProperties, void, physicalDevice, pExternalFenceInfo, pExternalFenceProperties) )


#define vkGetPhysicalDeviceExternalSemaphoreProperties_define \
     (vkGetPhysicalDeviceExternalSemaphoreProperties, void, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo const* pExternalSemaphoreInfo, VkExternalSemaphoreProperties * pExternalSemaphoreProperties),                \
     (vkGetPhysicalDeviceExternalSemaphoreProperties, void, VkPhysicalDevice , VkPhysicalDeviceExternalSemaphoreInfo const*, VkExternalSemaphoreProperties *),\
     (vkGetPhysicalDeviceExternalSemaphoreProperties, void, physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties) )



	// VK_KHR_surface
#define vkDestroySurfaceKHR_define \
     (vkDestroySurfaceKHR, void, (VkInstance  instance, VkSurfaceKHR  surface, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroySurfaceKHR, void, VkInstance , VkSurfaceKHR , VkAllocationCallbacks const*),\
     (vkDestroySurfaceKHR, void, instance, surface, pAllocator) )


#define vkGetPhysicalDeviceSurfaceSupportKHR_define \
     (vkGetPhysicalDeviceSurfaceSupportKHR, VkResult, (VkPhysicalDevice  physicalDevice, uint32_t  queueFamilyIndex, VkSurfaceKHR  surface, VkBool32 * pSupported),                \
     (vkGetPhysicalDeviceSurfaceSupportKHR, VkResult, VkPhysicalDevice , uint32_t , VkSurfaceKHR , VkBool32 *),\
     (vkGetPhysicalDeviceSurfaceSupportKHR, VkResult, physicalDevice, queueFamilyIndex, surface, pSupported) )


#define vkGetPhysicalDeviceSurfaceCapabilitiesKHR_define \
     (vkGetPhysicalDeviceSurfaceCapabilitiesKHR, VkResult, (VkPhysicalDevice  physicalDevice, VkSurfaceKHR  surface, VkSurfaceCapabilitiesKHR * pSurfaceCapabilities),                \
     (vkGetPhysicalDeviceSurfaceCapabilitiesKHR, VkResult, VkPhysicalDevice , VkSurfaceKHR , VkSurfaceCapabilitiesKHR *),\
     (vkGetPhysicalDeviceSurfaceCapabilitiesKHR, VkResult, physicalDevice, surface, pSurfaceCapabilities) )


#define vkGetPhysicalDeviceSurfaceFormatsKHR_define \
     (vkGetPhysicalDeviceSurfaceFormatsKHR, VkResult, (VkPhysicalDevice  physicalDevice, VkSurfaceKHR  surface, uint32_t * pSurfaceFormatCount, VkSurfaceFormatKHR * pSurfaceFormats),                \
     (vkGetPhysicalDeviceSurfaceFormatsKHR, VkResult, VkPhysicalDevice , VkSurfaceKHR , uint32_t *, VkSurfaceFormatKHR *),\
     (vkGetPhysicalDeviceSurfaceFormatsKHR, VkResult, physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats) )


#define vkGetPhysicalDeviceSurfacePresentModesKHR_define \
     (vkGetPhysicalDeviceSurfacePresentModesKHR, VkResult, (VkPhysicalDevice  physicalDevice, VkSurfaceKHR  surface, uint32_t * pPresentModeCount, VkPresentModeKHR * pPresentModes),                \
     (vkGetPhysicalDeviceSurfacePresentModesKHR, VkResult, VkPhysicalDevice , VkSurfaceKHR , uint32_t *, VkPresentModeKHR *),\
     (vkGetPhysicalDeviceSurfacePresentModesKHR, VkResult, physicalDevice, surface, pPresentModeCount, pPresentModes) )



	// VK_KHR_swapchain
#define vkGetPhysicalDevicePresentRectanglesKHR_define \
     (vkGetPhysicalDevicePresentRectanglesKHR, VkResult, (VkPhysicalDevice  physicalDevice, VkSurfaceKHR  surface, uint32_t * pRectCount, VkRect2D * pRects),                \
     (vkGetPhysicalDevicePresentRectanglesKHR, VkResult, VkPhysicalDevice , VkSurfaceKHR , uint32_t *, VkRect2D *),\
     (vkGetPhysicalDevicePresentRectanglesKHR, VkResult, physicalDevice, surface, pRectCount, pRects) )



	// VK_KHR_display
#define vkGetPhysicalDeviceDisplayPropertiesKHR_define \
     (vkGetPhysicalDeviceDisplayPropertiesKHR, VkResult, (VkPhysicalDevice  physicalDevice, uint32_t * pPropertyCount, VkDisplayPropertiesKHR * pProperties),                \
     (vkGetPhysicalDeviceDisplayPropertiesKHR, VkResult, VkPhysicalDevice , uint32_t *, VkDisplayPropertiesKHR *),\
     (vkGetPhysicalDeviceDisplayPropertiesKHR, VkResult, physicalDevice, pPropertyCount, pProperties) )


#define vkGetPhysicalDeviceDisplayPlanePropertiesKHR_define \
     (vkGetPhysicalDeviceDisplayPlanePropertiesKHR, VkResult, (VkPhysicalDevice  physicalDevice, uint32_t * pPropertyCount, VkDisplayPlanePropertiesKHR * pProperties),                \
     (vkGetPhysicalDeviceDisplayPlanePropertiesKHR, VkResult, VkPhysicalDevice , uint32_t *, VkDisplayPlanePropertiesKHR *),\
     (vkGetPhysicalDeviceDisplayPlanePropertiesKHR, VkResult, physicalDevice, pPropertyCount, pProperties) )


#define vkGetDisplayPlaneSupportedDisplaysKHR_define \
     (vkGetDisplayPlaneSupportedDisplaysKHR, VkResult, (VkPhysicalDevice  physicalDevice, uint32_t  planeIndex, uint32_t * pDisplayCount, VkDisplayKHR * pDisplays),                \
     (vkGetDisplayPlaneSupportedDisplaysKHR, VkResult, VkPhysicalDevice , uint32_t , uint32_t *, VkDisplayKHR *),\
     (vkGetDisplayPlaneSupportedDisplaysKHR, VkResult, physicalDevice, planeIndex, pDisplayCount, pDisplays) )


#define vkGetDisplayModePropertiesKHR_define \
     (vkGetDisplayModePropertiesKHR, VkResult, (VkPhysicalDevice  physicalDevice, VkDisplayKHR  display, uint32_t * pPropertyCount, VkDisplayModePropertiesKHR * pProperties),                \
     (vkGetDisplayModePropertiesKHR, VkResult, VkPhysicalDevice , VkDisplayKHR , uint32_t *, VkDisplayModePropertiesKHR *),\
     (vkGetDisplayModePropertiesKHR, VkResult, physicalDevice, display, pPropertyCount, pProperties) )


#define vkCreateDisplayModeKHR_define \
     (vkCreateDisplayModeKHR, VkResult, (VkPhysicalDevice  physicalDevice, VkDisplayKHR  display, VkDisplayModeCreateInfoKHR const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkDisplayModeKHR * pMode),                \
     (vkCreateDisplayModeKHR, VkResult, VkPhysicalDevice , VkDisplayKHR , VkDisplayModeCreateInfoKHR const*, VkAllocationCallbacks const*, VkDisplayModeKHR *),\
     (vkCreateDisplayModeKHR, VkResult, physicalDevice, display, pCreateInfo, pAllocator, pMode) )


#define vkGetDisplayPlaneCapabilitiesKHR_define \
     (vkGetDisplayPlaneCapabilitiesKHR, VkResult, (VkPhysicalDevice  physicalDevice, VkDisplayModeKHR  mode, uint32_t  planeIndex, VkDisplayPlaneCapabilitiesKHR * pCapabilities),                \
     (vkGetDisplayPlaneCapabilitiesKHR, VkResult, VkPhysicalDevice , VkDisplayModeKHR , uint32_t , VkDisplayPlaneCapabilitiesKHR *),\
     (vkGetDisplayPlaneCapabilitiesKHR, VkResult, physicalDevice, mode, planeIndex, pCapabilities) )


#define vkCreateDisplayPlaneSurfaceKHR_define \
     (vkCreateDisplayPlaneSurfaceKHR, VkResult, (VkInstance  instance, VkDisplaySurfaceCreateInfoKHR const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkSurfaceKHR * pSurface),                \
     (vkCreateDisplayPlaneSurfaceKHR, VkResult, VkInstance , VkDisplaySurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR *),\
     (vkCreateDisplayPlaneSurfaceKHR, VkResult, instance, pCreateInfo, pAllocator, pSurface) )



	// VK_KHR_android_surface
#ifdef VK_USE_PLATFORM_ANDROID_KHR
#define vkCreateAndroidSurfaceKHR_define \
     (vkCreateAndroidSurfaceKHR, VkResult, (VkInstance  instance, VkAndroidSurfaceCreateInfoKHR const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkSurfaceKHR * pSurface),                \
     (vkCreateAndroidSurfaceKHR, VkResult, VkInstance , VkAndroidSurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR *),\
     (vkCreateAndroidSurfaceKHR, VkResult, instance, pCreateInfo, pAllocator, pSurface) )


#endif // VK_USE_PLATFORM_ANDROID_KHR

	// VK_KHR_win32_surface
#ifdef VK_USE_PLATFORM_WIN32_KHR
#define vkCreateWin32SurfaceKHR_define \
     (vkCreateWin32SurfaceKHR, VkResult, (VkInstance  instance, VkWin32SurfaceCreateInfoKHR const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkSurfaceKHR * pSurface),                \
     (vkCreateWin32SurfaceKHR, VkResult, VkInstance , VkWin32SurfaceCreateInfoKHR const*, VkAllocationCallbacks const*, VkSurfaceKHR *),\
     (vkCreateWin32SurfaceKHR, VkResult, instance, pCreateInfo, pAllocator, pSurface) )


#define vkGetPhysicalDeviceWin32PresentationSupportKHR_define \
     (vkGetPhysicalDeviceWin32PresentationSupportKHR, VkBool32, (VkPhysicalDevice  physicalDevice, uint32_t  queueFamilyIndex),                \
     (vkGetPhysicalDeviceWin32PresentationSupportKHR, VkBool32, VkPhysicalDevice , uint32_t ),\
     (vkGetPhysicalDeviceWin32PresentationSupportKHR, VkBool32, physicalDevice, queueFamilyIndex) )


#endif // VK_USE_PLATFORM_WIN32_KHR

	// VK_KHR_get_physical_device_properties2
#define vkGetPhysicalDeviceFeatures2KHR_define \
     (vkGetPhysicalDeviceFeatures2KHR, void, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceFeatures2 * pFeatures),                \
     (vkGetPhysicalDeviceFeatures2KHR, void, VkPhysicalDevice , VkPhysicalDeviceFeatures2 *),\
     (vkGetPhysicalDeviceFeatures2KHR, void, physicalDevice, pFeatures) )


#define vkGetPhysicalDeviceProperties2KHR_define \
     (vkGetPhysicalDeviceProperties2KHR, void, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceProperties2 * pProperties),                \
     (vkGetPhysicalDeviceProperties2KHR, void, VkPhysicalDevice , VkPhysicalDeviceProperties2 *),\
     (vkGetPhysicalDeviceProperties2KHR, void, physicalDevice, pProperties) )


#define vkGetPhysicalDeviceFormatProperties2KHR_define \
     (vkGetPhysicalDeviceFormatProperties2KHR, void, (VkPhysicalDevice  physicalDevice, VkFormat  format, VkFormatProperties2 * pFormatProperties),                \
     (vkGetPhysicalDeviceFormatProperties2KHR, void, VkPhysicalDevice , VkFormat , VkFormatProperties2 *),\
     (vkGetPhysicalDeviceFormatProperties2KHR, void, physicalDevice, format, pFormatProperties) )


#define vkGetPhysicalDeviceImageFormatProperties2KHR_define \
     (vkGetPhysicalDeviceImageFormatProperties2KHR, VkResult, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceImageFormatInfo2 const* pImageFormatInfo, VkImageFormatProperties2 * pImageFormatProperties),                \
     (vkGetPhysicalDeviceImageFormatProperties2KHR, VkResult, VkPhysicalDevice , VkPhysicalDeviceImageFormatInfo2 const*, VkImageFormatProperties2 *),\
     (vkGetPhysicalDeviceImageFormatProperties2KHR, VkResult, physicalDevice, pImageFormatInfo, pImageFormatProperties) )


#define vkGetPhysicalDeviceQueueFamilyProperties2KHR_define \
     (vkGetPhysicalDeviceQueueFamilyProperties2KHR, void, (VkPhysicalDevice  physicalDevice, uint32_t * pQueueFamilyPropertyCount, VkQueueFamilyProperties2 * pQueueFamilyProperties),                \
     (vkGetPhysicalDeviceQueueFamilyProperties2KHR, void, VkPhysicalDevice , uint32_t *, VkQueueFamilyProperties2 *),\
     (vkGetPhysicalDeviceQueueFamilyProperties2KHR, void, physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties) )


#define vkGetPhysicalDeviceMemoryProperties2KHR_define \
     (vkGetPhysicalDeviceMemoryProperties2KHR, void, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceMemoryProperties2 * pMemoryProperties),                \
     (vkGetPhysicalDeviceMemoryProperties2KHR, void, VkPhysicalDevice , VkPhysicalDeviceMemoryProperties2 *),\
     (vkGetPhysicalDeviceMemoryProperties2KHR, void, physicalDevice, pMemoryProperties) )


#define vkGetPhysicalDeviceSparseImageFormatProperties2KHR_define \
     (vkGetPhysicalDeviceSparseImageFormatProperties2KHR, void, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2 const* pFormatInfo, uint32_t * pPropertyCount, VkSparseImageFormatProperties2 * pProperties),                \
     (vkGetPhysicalDeviceSparseImageFormatProperties2KHR, void, VkPhysicalDevice , VkPhysicalDeviceSparseImageFormatInfo2 const*, uint32_t *, VkSparseImageFormatProperties2 *),\
     (vkGetPhysicalDeviceSparseImageFormatProperties2KHR, void, physicalDevice, pFormatInfo, pPropertyCount, pProperties) )



	// VK_KHR_device_group_creation
#define vkEnumeratePhysicalDeviceGroupsKHR_define \
     (vkEnumeratePhysicalDeviceGroupsKHR, VkResult, (VkInstance  instance, uint32_t * pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties * pPhysicalDeviceGroupProperties),                \
     (vkEnumeratePhysicalDeviceGroupsKHR, VkResult, VkInstance , uint32_t *, VkPhysicalDeviceGroupProperties *),\
     (vkEnumeratePhysicalDeviceGroupsKHR, VkResult, instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties) )



	// VK_KHR_external_memory_capabilities
#define vkGetPhysicalDeviceExternalBufferPropertiesKHR_define \
     (vkGetPhysicalDeviceExternalBufferPropertiesKHR, void, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceExternalBufferInfo const* pExternalBufferInfo, VkExternalBufferProperties * pExternalBufferProperties),                \
     (vkGetPhysicalDeviceExternalBufferPropertiesKHR, void, VkPhysicalDevice , VkPhysicalDeviceExternalBufferInfo const*, VkExternalBufferProperties *),\
     (vkGetPhysicalDeviceExternalBufferPropertiesKHR, void, physicalDevice, pExternalBufferInfo, pExternalBufferProperties) )



	// VK_KHR_external_semaphore_capabilities
#define vkGetPhysicalDeviceExternalSemaphorePropertiesKHR_define \
     (vkGetPhysicalDeviceExternalSemaphorePropertiesKHR, void, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo const* pExternalSemaphoreInfo, VkExternalSemaphoreProperties * pExternalSemaphoreProperties),                \
     (vkGetPhysicalDeviceExternalSemaphorePropertiesKHR, void, VkPhysicalDevice , VkPhysicalDeviceExternalSemaphoreInfo const*, VkExternalSemaphoreProperties *),\
     (vkGetPhysicalDeviceExternalSemaphorePropertiesKHR, void, physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties) )



	// VK_KHR_external_fence_capabilities
#define vkGetPhysicalDeviceExternalFencePropertiesKHR_define \
     (vkGetPhysicalDeviceExternalFencePropertiesKHR, void, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceExternalFenceInfo const* pExternalFenceInfo, VkExternalFenceProperties * pExternalFenceProperties),                \
     (vkGetPhysicalDeviceExternalFencePropertiesKHR, void, VkPhysicalDevice , VkPhysicalDeviceExternalFenceInfo const*, VkExternalFenceProperties *),\
     (vkGetPhysicalDeviceExternalFencePropertiesKHR, void, physicalDevice, pExternalFenceInfo, pExternalFenceProperties) )



	// VK_KHR_get_surface_capabilities2
#define vkGetPhysicalDeviceSurfaceCapabilities2KHR_define \
     (vkGetPhysicalDeviceSurfaceCapabilities2KHR, VkResult, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR const* pSurfaceInfo, VkSurfaceCapabilities2KHR * pSurfaceCapabilities),                \
     (vkGetPhysicalDeviceSurfaceCapabilities2KHR, VkResult, VkPhysicalDevice , VkPhysicalDeviceSurfaceInfo2KHR const*, VkSurfaceCapabilities2KHR *),\
     (vkGetPhysicalDeviceSurfaceCapabilities2KHR, VkResult, physicalDevice, pSurfaceInfo, pSurfaceCapabilities) )


#define vkGetPhysicalDeviceSurfaceFormats2KHR_define \
     (vkGetPhysicalDeviceSurfaceFormats2KHR, VkResult, (VkPhysicalDevice  physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR const* pSurfaceInfo, uint32_t * pSurfaceFormatCount, VkSurfaceFormat2KHR * pSurfaceFormats),                \
     (vkGetPhysicalDeviceSurfaceFormats2KHR, VkResult, VkPhysicalDevice , VkPhysicalDeviceSurfaceInfo2KHR const*, uint32_t *, VkSurfaceFormat2KHR *),\
     (vkGetPhysicalDeviceSurfaceFormats2KHR, VkResult, physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats) )



	// VK_EXT_sample_locations
#define vkGetPhysicalDeviceMultisamplePropertiesEXT_define \
     (vkGetPhysicalDeviceMultisamplePropertiesEXT, void, (VkPhysicalDevice  physicalDevice, VkSampleCountFlagBits  samples, VkMultisamplePropertiesEXT * pMultisampleProperties),                \
     (vkGetPhysicalDeviceMultisamplePropertiesEXT, void, VkPhysicalDevice , VkSampleCountFlagBits , VkMultisamplePropertiesEXT *),\
     (vkGetPhysicalDeviceMultisamplePropertiesEXT, void, physicalDevice, samples, pMultisampleProperties) )



	// VK_KHR_fragment_shading_rate
#define vkGetPhysicalDeviceFragmentShadingRatesKHR_define \
     (vkGetPhysicalDeviceFragmentShadingRatesKHR, VkResult, (VkPhysicalDevice  physicalDevice, uint32_t * pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR * pFragmentShadingRates),                \
     (vkGetPhysicalDeviceFragmentShadingRatesKHR, VkResult, VkPhysicalDevice , uint32_t *, VkPhysicalDeviceFragmentShadingRateKHR *),\
     (vkGetPhysicalDeviceFragmentShadingRatesKHR, VkResult, physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates) )



	// VK_EXT_debug_report
#define vkCreateDebugReportCallbackEXT_define \
     (vkCreateDebugReportCallbackEXT, VkResult, (VkInstance  instance, VkDebugReportCallbackCreateInfoEXT const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkDebugReportCallbackEXT * pCallback),                \
     (vkCreateDebugReportCallbackEXT, VkResult, VkInstance , VkDebugReportCallbackCreateInfoEXT const*, VkAllocationCallbacks const*, VkDebugReportCallbackEXT *),\
     (vkCreateDebugReportCallbackEXT, VkResult, instance, pCreateInfo, pAllocator, pCallback) )


#define vkDestroyDebugReportCallbackEXT_define \
     (vkDestroyDebugReportCallbackEXT, void, (VkInstance  instance, VkDebugReportCallbackEXT  callback, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyDebugReportCallbackEXT, void, VkInstance , VkDebugReportCallbackEXT , VkAllocationCallbacks const*),\
     (vkDestroyDebugReportCallbackEXT, void, instance, callback, pAllocator) )


#define vkDebugReportMessageEXT_define \
     (vkDebugReportMessageEXT, void, (VkInstance  instance, VkDebugReportFlagsEXT  flags, VkDebugReportObjectTypeEXT  objectType, uint64_t  object, size_t  location, int32_t  messageCode, char const* pLayerPrefix, char const* pMessage),                \
     (vkDebugReportMessageEXT, void, VkInstance , VkDebugReportFlagsEXT , VkDebugReportObjectTypeEXT , uint64_t , size_t , int32_t , char const*, char const*),\
     (vkDebugReportMessageEXT, void, instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage) )





// Device api
	// VK_VERSION_1_0
#define vkGetDeviceProcAddr_define \
     (vkGetDeviceProcAddr, PFN_vkVoidFunction, (VkDevice  device, char const* pName),                \
     (vkGetDeviceProcAddr, PFN_vkVoidFunction, VkDevice , char const*),\
     (vkGetDeviceProcAddr, PFN_vkVoidFunction, device, pName) )


#define vkDestroyDevice_define \
     (vkDestroyDevice, void, (VkDevice  device, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyDevice, void, VkDevice , VkAllocationCallbacks const*),\
     (vkDestroyDevice, void, device, pAllocator) )


#define vkGetDeviceQueue_define \
     (vkGetDeviceQueue, void, (VkDevice  device, uint32_t  queueFamilyIndex, uint32_t  queueIndex, VkQueue * pQueue),                \
     (vkGetDeviceQueue, void, VkDevice , uint32_t , uint32_t , VkQueue *),\
     (vkGetDeviceQueue, void, device, queueFamilyIndex, queueIndex, pQueue) )


#define vkQueueSubmit_define \
     (vkQueueSubmit, VkResult, (VkQueue  queue, uint32_t  submitCount, VkSubmitInfo const* pSubmits, VkFence  fence),                \
     (vkQueueSubmit, VkResult, VkQueue , uint32_t , VkSubmitInfo const*, VkFence ),\
     (vkQueueSubmit, VkResult, queue, submitCount, pSubmits, fence) )


#define vkQueueWaitIdle_define \
     (vkQueueWaitIdle, VkResult, (VkQueue  queue),                \
     (vkQueueWaitIdle, VkResult, VkQueue ),\
     (vkQueueWaitIdle, VkResult, queue) )


#define vkDeviceWaitIdle_define \
     (vkDeviceWaitIdle, VkResult, (VkDevice  device),                \
     (vkDeviceWaitIdle, VkResult, VkDevice ),\
     (vkDeviceWaitIdle, VkResult, device) )


#define vkAllocateMemory_define \
     (vkAllocateMemory, VkResult, (VkDevice  device, VkMemoryAllocateInfo const* pAllocateInfo, VkAllocationCallbacks const* pAllocator, VkDeviceMemory * pMemory),                \
     (vkAllocateMemory, VkResult, VkDevice , VkMemoryAllocateInfo const*, VkAllocationCallbacks const*, VkDeviceMemory *),\
     (vkAllocateMemory, VkResult, device, pAllocateInfo, pAllocator, pMemory) )


#define vkFreeMemory_define \
     (vkFreeMemory, void, (VkDevice  device, VkDeviceMemory  memory, VkAllocationCallbacks const* pAllocator),                \
     (vkFreeMemory, void, VkDevice , VkDeviceMemory , VkAllocationCallbacks const*),\
     (vkFreeMemory, void, device, memory, pAllocator) )


#define vkMapMemory_define \
     (vkMapMemory, VkResult, (VkDevice  device, VkDeviceMemory  memory, VkDeviceSize  offset, VkDeviceSize  size, VkMemoryMapFlags  flags, void ** ppData),                \
     (vkMapMemory, VkResult, VkDevice , VkDeviceMemory , VkDeviceSize , VkDeviceSize , VkMemoryMapFlags , void **),\
     (vkMapMemory, VkResult, device, memory, offset, size, flags, ppData) )


#define vkUnmapMemory_define \
     (vkUnmapMemory, void, (VkDevice  device, VkDeviceMemory  memory),                \
     (vkUnmapMemory, void, VkDevice , VkDeviceMemory ),\
     (vkUnmapMemory, void, device, memory) )


#define vkFlushMappedMemoryRanges_define \
     (vkFlushMappedMemoryRanges, VkResult, (VkDevice  device, uint32_t  memoryRangeCount, VkMappedMemoryRange const* pMemoryRanges),                \
     (vkFlushMappedMemoryRanges, VkResult, VkDevice , uint32_t , VkMappedMemoryRange const*),\
     (vkFlushMappedMemoryRanges, VkResult, device, memoryRangeCount, pMemoryRanges) )


#define vkInvalidateMappedMemoryRanges_define \
     (vkInvalidateMappedMemoryRanges, VkResult, (VkDevice  device, uint32_t  memoryRangeCount, VkMappedMemoryRange const* pMemoryRanges),                \
     (vkInvalidateMappedMemoryRanges, VkResult, VkDevice , uint32_t , VkMappedMemoryRange const*),\
     (vkInvalidateMappedMemoryRanges, VkResult, device, memoryRangeCount, pMemoryRanges) )


#define vkGetDeviceMemoryCommitment_define \
     (vkGetDeviceMemoryCommitment, void, (VkDevice  device, VkDeviceMemory  memory, VkDeviceSize * pCommittedMemoryInBytes),                \
     (vkGetDeviceMemoryCommitment, void, VkDevice , VkDeviceMemory , VkDeviceSize *),\
     (vkGetDeviceMemoryCommitment, void, device, memory, pCommittedMemoryInBytes) )


#define vkBindBufferMemory_define \
     (vkBindBufferMemory, VkResult, (VkDevice  device, VkBuffer  buffer, VkDeviceMemory  memory, VkDeviceSize  memoryOffset),                \
     (vkBindBufferMemory, VkResult, VkDevice , VkBuffer , VkDeviceMemory , VkDeviceSize ),\
     (vkBindBufferMemory, VkResult, device, buffer, memory, memoryOffset) )


#define vkBindImageMemory_define \
     (vkBindImageMemory, VkResult, (VkDevice  device, VkImage  image, VkDeviceMemory  memory, VkDeviceSize  memoryOffset),                \
     (vkBindImageMemory, VkResult, VkDevice , VkImage , VkDeviceMemory , VkDeviceSize ),\
     (vkBindImageMemory, VkResult, device, image, memory, memoryOffset) )


#define vkGetBufferMemoryRequirements_define \
     (vkGetBufferMemoryRequirements, void, (VkDevice  device, VkBuffer  buffer, VkMemoryRequirements * pMemoryRequirements),                \
     (vkGetBufferMemoryRequirements, void, VkDevice , VkBuffer , VkMemoryRequirements *),\
     (vkGetBufferMemoryRequirements, void, device, buffer, pMemoryRequirements) )


#define vkGetImageMemoryRequirements_define \
     (vkGetImageMemoryRequirements, void, (VkDevice  device, VkImage  image, VkMemoryRequirements * pMemoryRequirements),                \
     (vkGetImageMemoryRequirements, void, VkDevice , VkImage , VkMemoryRequirements *),\
     (vkGetImageMemoryRequirements, void, device, image, pMemoryRequirements) )


#define vkGetImageSparseMemoryRequirements_define \
     (vkGetImageSparseMemoryRequirements, void, (VkDevice  device, VkImage  image, uint32_t * pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements * pSparseMemoryRequirements),                \
     (vkGetImageSparseMemoryRequirements, void, VkDevice , VkImage , uint32_t *, VkSparseImageMemoryRequirements *),\
     (vkGetImageSparseMemoryRequirements, void, device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements) )


#define vkQueueBindSparse_define \
     (vkQueueBindSparse, VkResult, (VkQueue  queue, uint32_t  bindInfoCount, VkBindSparseInfo const* pBindInfo, VkFence  fence),                \
     (vkQueueBindSparse, VkResult, VkQueue , uint32_t , VkBindSparseInfo const*, VkFence ),\
     (vkQueueBindSparse, VkResult, queue, bindInfoCount, pBindInfo, fence) )


#define vkCreateFence_define \
     (vkCreateFence, VkResult, (VkDevice  device, VkFenceCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkFence * pFence),                \
     (vkCreateFence, VkResult, VkDevice , VkFenceCreateInfo const*, VkAllocationCallbacks const*, VkFence *),\
     (vkCreateFence, VkResult, device, pCreateInfo, pAllocator, pFence) )


#define vkDestroyFence_define \
     (vkDestroyFence, void, (VkDevice  device, VkFence  fence, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyFence, void, VkDevice , VkFence , VkAllocationCallbacks const*),\
     (vkDestroyFence, void, device, fence, pAllocator) )


#define vkResetFences_define \
     (vkResetFences, VkResult, (VkDevice  device, uint32_t  fenceCount, VkFence const* pFences),                \
     (vkResetFences, VkResult, VkDevice , uint32_t , VkFence const*),\
     (vkResetFences, VkResult, device, fenceCount, pFences) )


#define vkGetFenceStatus_define \
     (vkGetFenceStatus, VkResult, (VkDevice  device, VkFence  fence),                \
     (vkGetFenceStatus, VkResult, VkDevice , VkFence ),\
     (vkGetFenceStatus, VkResult, device, fence) )


#define vkWaitForFences_define \
     (vkWaitForFences, VkResult, (VkDevice  device, uint32_t  fenceCount, VkFence const* pFences, VkBool32  waitAll, uint64_t  timeout),                \
     (vkWaitForFences, VkResult, VkDevice , uint32_t , VkFence const*, VkBool32 , uint64_t ),\
     (vkWaitForFences, VkResult, device, fenceCount, pFences, waitAll, timeout) )


#define vkCreateSemaphore_define \
     (vkCreateSemaphore, VkResult, (VkDevice  device, VkSemaphoreCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkSemaphore * pSemaphore),                \
     (vkCreateSemaphore, VkResult, VkDevice , VkSemaphoreCreateInfo const*, VkAllocationCallbacks const*, VkSemaphore *),\
     (vkCreateSemaphore, VkResult, device, pCreateInfo, pAllocator, pSemaphore) )


#define vkDestroySemaphore_define \
     (vkDestroySemaphore, void, (VkDevice  device, VkSemaphore  semaphore, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroySemaphore, void, VkDevice , VkSemaphore , VkAllocationCallbacks const*),\
     (vkDestroySemaphore, void, device, semaphore, pAllocator) )


#define vkCreateEvent_define \
     (vkCreateEvent, VkResult, (VkDevice  device, VkEventCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkEvent * pEvent),                \
     (vkCreateEvent, VkResult, VkDevice , VkEventCreateInfo const*, VkAllocationCallbacks const*, VkEvent *),\
     (vkCreateEvent, VkResult, device, pCreateInfo, pAllocator, pEvent) )


#define vkDestroyEvent_define \
     (vkDestroyEvent, void, (VkDevice  device, VkEvent  event, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyEvent, void, VkDevice , VkEvent , VkAllocationCallbacks const*),\
     (vkDestroyEvent, void, device, event, pAllocator) )


#define vkGetEventStatus_define \
     (vkGetEventStatus, VkResult, (VkDevice  device, VkEvent  event),                \
     (vkGetEventStatus, VkResult, VkDevice , VkEvent ),\
     (vkGetEventStatus, VkResult, device, event) )


#define vkSetEvent_define \
     (vkSetEvent, VkResult, (VkDevice  device, VkEvent  event),                \
     (vkSetEvent, VkResult, VkDevice , VkEvent ),\
     (vkSetEvent, VkResult, device, event) )


#define vkResetEvent_define \
     (vkResetEvent, VkResult, (VkDevice  device, VkEvent  event),                \
     (vkResetEvent, VkResult, VkDevice , VkEvent ),\
     (vkResetEvent, VkResult, device, event) )


#define vkCreateQueryPool_define \
     (vkCreateQueryPool, VkResult, (VkDevice  device, VkQueryPoolCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkQueryPool * pQueryPool),                \
     (vkCreateQueryPool, VkResult, VkDevice , VkQueryPoolCreateInfo const*, VkAllocationCallbacks const*, VkQueryPool *),\
     (vkCreateQueryPool, VkResult, device, pCreateInfo, pAllocator, pQueryPool) )


#define vkDestroyQueryPool_define \
     (vkDestroyQueryPool, void, (VkDevice  device, VkQueryPool  queryPool, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyQueryPool, void, VkDevice , VkQueryPool , VkAllocationCallbacks const*),\
     (vkDestroyQueryPool, void, device, queryPool, pAllocator) )


#define vkGetQueryPoolResults_define \
     (vkGetQueryPoolResults, VkResult, (VkDevice  device, VkQueryPool  queryPool, uint32_t  firstQuery, uint32_t  queryCount, size_t  dataSize, void * pData, VkDeviceSize  stride, VkQueryResultFlags  flags),                \
     (vkGetQueryPoolResults, VkResult, VkDevice , VkQueryPool , uint32_t , uint32_t , size_t , void *, VkDeviceSize , VkQueryResultFlags ),\
     (vkGetQueryPoolResults, VkResult, device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags) )


#define vkCreateBuffer_define \
     (vkCreateBuffer, VkResult, (VkDevice  device, VkBufferCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkBuffer * pBuffer),                \
     (vkCreateBuffer, VkResult, VkDevice , VkBufferCreateInfo const*, VkAllocationCallbacks const*, VkBuffer *),\
     (vkCreateBuffer, VkResult, device, pCreateInfo, pAllocator, pBuffer) )


#define vkDestroyBuffer_define \
     (vkDestroyBuffer, void, (VkDevice  device, VkBuffer  buffer, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyBuffer, void, VkDevice , VkBuffer , VkAllocationCallbacks const*),\
     (vkDestroyBuffer, void, device, buffer, pAllocator) )


#define vkCreateBufferView_define \
     (vkCreateBufferView, VkResult, (VkDevice  device, VkBufferViewCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkBufferView * pView),                \
     (vkCreateBufferView, VkResult, VkDevice , VkBufferViewCreateInfo const*, VkAllocationCallbacks const*, VkBufferView *),\
     (vkCreateBufferView, VkResult, device, pCreateInfo, pAllocator, pView) )


#define vkDestroyBufferView_define \
     (vkDestroyBufferView, void, (VkDevice  device, VkBufferView  bufferView, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyBufferView, void, VkDevice , VkBufferView , VkAllocationCallbacks const*),\
     (vkDestroyBufferView, void, device, bufferView, pAllocator) )


#define vkCreateImage_define \
     (vkCreateImage, VkResult, (VkDevice  device, VkImageCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkImage * pImage),                \
     (vkCreateImage, VkResult, VkDevice , VkImageCreateInfo const*, VkAllocationCallbacks const*, VkImage *),\
     (vkCreateImage, VkResult, device, pCreateInfo, pAllocator, pImage) )


#define vkDestroyImage_define \
     (vkDestroyImage, void, (VkDevice  device, VkImage  image, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyImage, void, VkDevice , VkImage , VkAllocationCallbacks const*),\
     (vkDestroyImage, void, device, image, pAllocator) )


#define vkGetImageSubresourceLayout_define \
     (vkGetImageSubresourceLayout, void, (VkDevice  device, VkImage  image, VkImageSubresource const* pSubresource, VkSubresourceLayout * pLayout),                \
     (vkGetImageSubresourceLayout, void, VkDevice , VkImage , VkImageSubresource const*, VkSubresourceLayout *),\
     (vkGetImageSubresourceLayout, void, device, image, pSubresource, pLayout) )


#define vkCreateImageView_define \
     (vkCreateImageView, VkResult, (VkDevice  device, VkImageViewCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkImageView * pView),                \
     (vkCreateImageView, VkResult, VkDevice , VkImageViewCreateInfo const*, VkAllocationCallbacks const*, VkImageView *),\
     (vkCreateImageView, VkResult, device, pCreateInfo, pAllocator, pView) )


#define vkDestroyImageView_define \
     (vkDestroyImageView, void, (VkDevice  device, VkImageView  imageView, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyImageView, void, VkDevice , VkImageView , VkAllocationCallbacks const*),\
     (vkDestroyImageView, void, device, imageView, pAllocator) )


#define vkCreateShaderModule_define \
     (vkCreateShaderModule, VkResult, (VkDevice  device, VkShaderModuleCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkShaderModule * pShaderModule),                \
     (vkCreateShaderModule, VkResult, VkDevice , VkShaderModuleCreateInfo const*, VkAllocationCallbacks const*, VkShaderModule *),\
     (vkCreateShaderModule, VkResult, device, pCreateInfo, pAllocator, pShaderModule) )


#define vkDestroyShaderModule_define \
     (vkDestroyShaderModule, void, (VkDevice  device, VkShaderModule  shaderModule, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyShaderModule, void, VkDevice , VkShaderModule , VkAllocationCallbacks const*),\
     (vkDestroyShaderModule, void, device, shaderModule, pAllocator) )


#define vkCreatePipelineCache_define \
     (vkCreatePipelineCache, VkResult, (VkDevice  device, VkPipelineCacheCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkPipelineCache * pPipelineCache),                \
     (vkCreatePipelineCache, VkResult, VkDevice , VkPipelineCacheCreateInfo const*, VkAllocationCallbacks const*, VkPipelineCache *),\
     (vkCreatePipelineCache, VkResult, device, pCreateInfo, pAllocator, pPipelineCache) )


#define vkDestroyPipelineCache_define \
     (vkDestroyPipelineCache, void, (VkDevice  device, VkPipelineCache  pipelineCache, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyPipelineCache, void, VkDevice , VkPipelineCache , VkAllocationCallbacks const*),\
     (vkDestroyPipelineCache, void, device, pipelineCache, pAllocator) )


#define vkGetPipelineCacheData_define \
     (vkGetPipelineCacheData, VkResult, (VkDevice  device, VkPipelineCache  pipelineCache, size_t * pDataSize, void * pData),                \
     (vkGetPipelineCacheData, VkResult, VkDevice , VkPipelineCache , size_t *, void *),\
     (vkGetPipelineCacheData, VkResult, device, pipelineCache, pDataSize, pData) )


#define vkMergePipelineCaches_define \
     (vkMergePipelineCaches, VkResult, (VkDevice  device, VkPipelineCache  dstCache, uint32_t  srcCacheCount, VkPipelineCache const* pSrcCaches),                \
     (vkMergePipelineCaches, VkResult, VkDevice , VkPipelineCache , uint32_t , VkPipelineCache const*),\
     (vkMergePipelineCaches, VkResult, device, dstCache, srcCacheCount, pSrcCaches) )


#define vkCreateGraphicsPipelines_define \
     (vkCreateGraphicsPipelines, VkResult, (VkDevice  device, VkPipelineCache  pipelineCache, uint32_t  createInfoCount, VkGraphicsPipelineCreateInfo const* pCreateInfos, VkAllocationCallbacks const* pAllocator, VkPipeline * pPipelines),                \
     (vkCreateGraphicsPipelines, VkResult, VkDevice , VkPipelineCache , uint32_t , VkGraphicsPipelineCreateInfo const*, VkAllocationCallbacks const*, VkPipeline *),\
     (vkCreateGraphicsPipelines, VkResult, device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) )


#define vkCreateComputePipelines_define \
     (vkCreateComputePipelines, VkResult, (VkDevice  device, VkPipelineCache  pipelineCache, uint32_t  createInfoCount, VkComputePipelineCreateInfo const* pCreateInfos, VkAllocationCallbacks const* pAllocator, VkPipeline * pPipelines),                \
     (vkCreateComputePipelines, VkResult, VkDevice , VkPipelineCache , uint32_t , VkComputePipelineCreateInfo const*, VkAllocationCallbacks const*, VkPipeline *),\
     (vkCreateComputePipelines, VkResult, device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) )


#define vkDestroyPipeline_define \
     (vkDestroyPipeline, void, (VkDevice  device, VkPipeline  pipeline, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyPipeline, void, VkDevice , VkPipeline , VkAllocationCallbacks const*),\
     (vkDestroyPipeline, void, device, pipeline, pAllocator) )


#define vkCreatePipelineLayout_define \
     (vkCreatePipelineLayout, VkResult, (VkDevice  device, VkPipelineLayoutCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkPipelineLayout * pPipelineLayout),                \
     (vkCreatePipelineLayout, VkResult, VkDevice , VkPipelineLayoutCreateInfo const*, VkAllocationCallbacks const*, VkPipelineLayout *),\
     (vkCreatePipelineLayout, VkResult, device, pCreateInfo, pAllocator, pPipelineLayout) )


#define vkDestroyPipelineLayout_define \
     (vkDestroyPipelineLayout, void, (VkDevice  device, VkPipelineLayout  pipelineLayout, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyPipelineLayout, void, VkDevice , VkPipelineLayout , VkAllocationCallbacks const*),\
     (vkDestroyPipelineLayout, void, device, pipelineLayout, pAllocator) )


#define vkCreateSampler_define \
     (vkCreateSampler, VkResult, (VkDevice  device, VkSamplerCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkSampler * pSampler),                \
     (vkCreateSampler, VkResult, VkDevice , VkSamplerCreateInfo const*, VkAllocationCallbacks const*, VkSampler *),\
     (vkCreateSampler, VkResult, device, pCreateInfo, pAllocator, pSampler) )


#define vkDestroySampler_define \
     (vkDestroySampler, void, (VkDevice  device, VkSampler  sampler, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroySampler, void, VkDevice , VkSampler , VkAllocationCallbacks const*),\
     (vkDestroySampler, void, device, sampler, pAllocator) )


#define vkCreateDescriptorSetLayout_define \
     (vkCreateDescriptorSetLayout, VkResult, (VkDevice  device, VkDescriptorSetLayoutCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkDescriptorSetLayout * pSetLayout),                \
     (vkCreateDescriptorSetLayout, VkResult, VkDevice , VkDescriptorSetLayoutCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorSetLayout *),\
     (vkCreateDescriptorSetLayout, VkResult, device, pCreateInfo, pAllocator, pSetLayout) )


#define vkDestroyDescriptorSetLayout_define \
     (vkDestroyDescriptorSetLayout, void, (VkDevice  device, VkDescriptorSetLayout  descriptorSetLayout, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyDescriptorSetLayout, void, VkDevice , VkDescriptorSetLayout , VkAllocationCallbacks const*),\
     (vkDestroyDescriptorSetLayout, void, device, descriptorSetLayout, pAllocator) )


#define vkCreateDescriptorPool_define \
     (vkCreateDescriptorPool, VkResult, (VkDevice  device, VkDescriptorPoolCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkDescriptorPool * pDescriptorPool),                \
     (vkCreateDescriptorPool, VkResult, VkDevice , VkDescriptorPoolCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorPool *),\
     (vkCreateDescriptorPool, VkResult, device, pCreateInfo, pAllocator, pDescriptorPool) )


#define vkDestroyDescriptorPool_define \
     (vkDestroyDescriptorPool, void, (VkDevice  device, VkDescriptorPool  descriptorPool, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyDescriptorPool, void, VkDevice , VkDescriptorPool , VkAllocationCallbacks const*),\
     (vkDestroyDescriptorPool, void, device, descriptorPool, pAllocator) )


#define vkResetDescriptorPool_define \
     (vkResetDescriptorPool, VkResult, (VkDevice  device, VkDescriptorPool  descriptorPool, VkDescriptorPoolResetFlags  flags),                \
     (vkResetDescriptorPool, VkResult, VkDevice , VkDescriptorPool , VkDescriptorPoolResetFlags ),\
     (vkResetDescriptorPool, VkResult, device, descriptorPool, flags) )


#define vkAllocateDescriptorSets_define \
     (vkAllocateDescriptorSets, VkResult, (VkDevice  device, VkDescriptorSetAllocateInfo const* pAllocateInfo, VkDescriptorSet * pDescriptorSets),                \
     (vkAllocateDescriptorSets, VkResult, VkDevice , VkDescriptorSetAllocateInfo const*, VkDescriptorSet *),\
     (vkAllocateDescriptorSets, VkResult, device, pAllocateInfo, pDescriptorSets) )


#define vkFreeDescriptorSets_define \
     (vkFreeDescriptorSets, VkResult, (VkDevice  device, VkDescriptorPool  descriptorPool, uint32_t  descriptorSetCount, VkDescriptorSet const* pDescriptorSets),                \
     (vkFreeDescriptorSets, VkResult, VkDevice , VkDescriptorPool , uint32_t , VkDescriptorSet const*),\
     (vkFreeDescriptorSets, VkResult, device, descriptorPool, descriptorSetCount, pDescriptorSets) )


#define vkUpdateDescriptorSets_define \
     (vkUpdateDescriptorSets, void, (VkDevice  device, uint32_t  descriptorWriteCount, VkWriteDescriptorSet const* pDescriptorWrites, uint32_t  descriptorCopyCount, VkCopyDescriptorSet const* pDescriptorCopies),                \
     (vkUpdateDescriptorSets, void, VkDevice , uint32_t , VkWriteDescriptorSet const*, uint32_t , VkCopyDescriptorSet const*),\
     (vkUpdateDescriptorSets, void, device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies) )


#define vkCreateFramebuffer_define \
     (vkCreateFramebuffer, VkResult, (VkDevice  device, VkFramebufferCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkFramebuffer * pFramebuffer),                \
     (vkCreateFramebuffer, VkResult, VkDevice , VkFramebufferCreateInfo const*, VkAllocationCallbacks const*, VkFramebuffer *),\
     (vkCreateFramebuffer, VkResult, device, pCreateInfo, pAllocator, pFramebuffer) )


#define vkDestroyFramebuffer_define \
     (vkDestroyFramebuffer, void, (VkDevice  device, VkFramebuffer  framebuffer, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyFramebuffer, void, VkDevice , VkFramebuffer , VkAllocationCallbacks const*),\
     (vkDestroyFramebuffer, void, device, framebuffer, pAllocator) )


#define vkCreateRenderPass_define \
     (vkCreateRenderPass, VkResult, (VkDevice  device, VkRenderPassCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkRenderPass * pRenderPass),                \
     (vkCreateRenderPass, VkResult, VkDevice , VkRenderPassCreateInfo const*, VkAllocationCallbacks const*, VkRenderPass *),\
     (vkCreateRenderPass, VkResult, device, pCreateInfo, pAllocator, pRenderPass) )


#define vkDestroyRenderPass_define \
     (vkDestroyRenderPass, void, (VkDevice  device, VkRenderPass  renderPass, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyRenderPass, void, VkDevice , VkRenderPass , VkAllocationCallbacks const*),\
     (vkDestroyRenderPass, void, device, renderPass, pAllocator) )


#define vkGetRenderAreaGranularity_define \
     (vkGetRenderAreaGranularity, void, (VkDevice  device, VkRenderPass  renderPass, VkExtent2D * pGranularity),                \
     (vkGetRenderAreaGranularity, void, VkDevice , VkRenderPass , VkExtent2D *),\
     (vkGetRenderAreaGranularity, void, device, renderPass, pGranularity) )


#define vkCreateCommandPool_define \
     (vkCreateCommandPool, VkResult, (VkDevice  device, VkCommandPoolCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkCommandPool * pCommandPool),                \
     (vkCreateCommandPool, VkResult, VkDevice , VkCommandPoolCreateInfo const*, VkAllocationCallbacks const*, VkCommandPool *),\
     (vkCreateCommandPool, VkResult, device, pCreateInfo, pAllocator, pCommandPool) )


#define vkDestroyCommandPool_define \
     (vkDestroyCommandPool, void, (VkDevice  device, VkCommandPool  commandPool, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyCommandPool, void, VkDevice , VkCommandPool , VkAllocationCallbacks const*),\
     (vkDestroyCommandPool, void, device, commandPool, pAllocator) )


#define vkResetCommandPool_define \
     (vkResetCommandPool, VkResult, (VkDevice  device, VkCommandPool  commandPool, VkCommandPoolResetFlags  flags),                \
     (vkResetCommandPool, VkResult, VkDevice , VkCommandPool , VkCommandPoolResetFlags ),\
     (vkResetCommandPool, VkResult, device, commandPool, flags) )


#define vkAllocateCommandBuffers_define \
     (vkAllocateCommandBuffers, VkResult, (VkDevice  device, VkCommandBufferAllocateInfo const* pAllocateInfo, VkCommandBuffer * pCommandBuffers),                \
     (vkAllocateCommandBuffers, VkResult, VkDevice , VkCommandBufferAllocateInfo const*, VkCommandBuffer *),\
     (vkAllocateCommandBuffers, VkResult, device, pAllocateInfo, pCommandBuffers) )


#define vkFreeCommandBuffers_define \
     (vkFreeCommandBuffers, void, (VkDevice  device, VkCommandPool  commandPool, uint32_t  commandBufferCount, VkCommandBuffer const* pCommandBuffers),                \
     (vkFreeCommandBuffers, void, VkDevice , VkCommandPool , uint32_t , VkCommandBuffer const*),\
     (vkFreeCommandBuffers, void, device, commandPool, commandBufferCount, pCommandBuffers) )


#define vkBeginCommandBuffer_define \
     (vkBeginCommandBuffer, VkResult, (VkCommandBuffer  commandBuffer, VkCommandBufferBeginInfo const* pBeginInfo),                \
     (vkBeginCommandBuffer, VkResult, VkCommandBuffer , VkCommandBufferBeginInfo const*),\
     (vkBeginCommandBuffer, VkResult, commandBuffer, pBeginInfo) )


#define vkEndCommandBuffer_define \
     (vkEndCommandBuffer, VkResult, (VkCommandBuffer  commandBuffer),                \
     (vkEndCommandBuffer, VkResult, VkCommandBuffer ),\
     (vkEndCommandBuffer, VkResult, commandBuffer) )


#define vkResetCommandBuffer_define \
     (vkResetCommandBuffer, VkResult, (VkCommandBuffer  commandBuffer, VkCommandBufferResetFlags  flags),                \
     (vkResetCommandBuffer, VkResult, VkCommandBuffer , VkCommandBufferResetFlags ),\
     (vkResetCommandBuffer, VkResult, commandBuffer, flags) )


#define vkCmdBindPipeline_define \
     (vkCmdBindPipeline, void, (VkCommandBuffer  commandBuffer, VkPipelineBindPoint  pipelineBindPoint, VkPipeline  pipeline),                \
     (vkCmdBindPipeline, void, VkCommandBuffer , VkPipelineBindPoint , VkPipeline ),\
     (vkCmdBindPipeline, void, commandBuffer, pipelineBindPoint, pipeline) )


#define vkCmdSetViewport_define \
     (vkCmdSetViewport, void, (VkCommandBuffer  commandBuffer, uint32_t  firstViewport, uint32_t  viewportCount, VkViewport const* pViewports),                \
     (vkCmdSetViewport, void, VkCommandBuffer , uint32_t , uint32_t , VkViewport const*),\
     (vkCmdSetViewport, void, commandBuffer, firstViewport, viewportCount, pViewports) )


#define vkCmdSetScissor_define \
     (vkCmdSetScissor, void, (VkCommandBuffer  commandBuffer, uint32_t  firstScissor, uint32_t  scissorCount, VkRect2D const* pScissors),                \
     (vkCmdSetScissor, void, VkCommandBuffer , uint32_t , uint32_t , VkRect2D const*),\
     (vkCmdSetScissor, void, commandBuffer, firstScissor, scissorCount, pScissors) )


#define vkCmdSetLineWidth_define \
     (vkCmdSetLineWidth, void, (VkCommandBuffer  commandBuffer, float  lineWidth),                \
     (vkCmdSetLineWidth, void, VkCommandBuffer , float ),\
     (vkCmdSetLineWidth, void, commandBuffer, lineWidth) )


#define vkCmdSetDepthBias_define \
     (vkCmdSetDepthBias, void, (VkCommandBuffer  commandBuffer, float  depthBiasConstantFactor, float  depthBiasClamp, float  depthBiasSlopeFactor),                \
     (vkCmdSetDepthBias, void, VkCommandBuffer , float , float , float ),\
     (vkCmdSetDepthBias, void, commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor) )


#define vkCmdSetBlendConstants_define \
     (vkCmdSetBlendConstants, void, (VkCommandBuffer  commandBuffer, float const blendConstants[4]),                \
     (vkCmdSetBlendConstants, void, VkCommandBuffer , float const[4]),\
     (vkCmdSetBlendConstants, void, commandBuffer, blendConstants) )


#define vkCmdSetDepthBounds_define \
     (vkCmdSetDepthBounds, void, (VkCommandBuffer  commandBuffer, float  minDepthBounds, float  maxDepthBounds),                \
     (vkCmdSetDepthBounds, void, VkCommandBuffer , float , float ),\
     (vkCmdSetDepthBounds, void, commandBuffer, minDepthBounds, maxDepthBounds) )


#define vkCmdSetStencilCompareMask_define \
     (vkCmdSetStencilCompareMask, void, (VkCommandBuffer  commandBuffer, VkStencilFaceFlags  faceMask, uint32_t  compareMask),                \
     (vkCmdSetStencilCompareMask, void, VkCommandBuffer , VkStencilFaceFlags , uint32_t ),\
     (vkCmdSetStencilCompareMask, void, commandBuffer, faceMask, compareMask) )


#define vkCmdSetStencilWriteMask_define \
     (vkCmdSetStencilWriteMask, void, (VkCommandBuffer  commandBuffer, VkStencilFaceFlags  faceMask, uint32_t  writeMask),                \
     (vkCmdSetStencilWriteMask, void, VkCommandBuffer , VkStencilFaceFlags , uint32_t ),\
     (vkCmdSetStencilWriteMask, void, commandBuffer, faceMask, writeMask) )


#define vkCmdSetStencilReference_define \
     (vkCmdSetStencilReference, void, (VkCommandBuffer  commandBuffer, VkStencilFaceFlags  faceMask, uint32_t  reference),                \
     (vkCmdSetStencilReference, void, VkCommandBuffer , VkStencilFaceFlags , uint32_t ),\
     (vkCmdSetStencilReference, void, commandBuffer, faceMask, reference) )


#define vkCmdBindDescriptorSets_define \
     (vkCmdBindDescriptorSets, void, (VkCommandBuffer  commandBuffer, VkPipelineBindPoint  pipelineBindPoint, VkPipelineLayout  layout, uint32_t  firstSet, uint32_t  descriptorSetCount, VkDescriptorSet const* pDescriptorSets, uint32_t  dynamicOffsetCount, uint32_t const* pDynamicOffsets),                \
     (vkCmdBindDescriptorSets, void, VkCommandBuffer , VkPipelineBindPoint , VkPipelineLayout , uint32_t , uint32_t , VkDescriptorSet const*, uint32_t , uint32_t const*),\
     (vkCmdBindDescriptorSets, void, commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets) )


#define vkCmdBindIndexBuffer_define \
     (vkCmdBindIndexBuffer, void, (VkCommandBuffer  commandBuffer, VkBuffer  buffer, VkDeviceSize  offset, VkIndexType  indexType),                \
     (vkCmdBindIndexBuffer, void, VkCommandBuffer , VkBuffer , VkDeviceSize , VkIndexType ),\
     (vkCmdBindIndexBuffer, void, commandBuffer, buffer, offset, indexType) )


#define vkCmdBindVertexBuffers_define \
     (vkCmdBindVertexBuffers, void, (VkCommandBuffer  commandBuffer, uint32_t  firstBinding, uint32_t  bindingCount, VkBuffer const* pBuffers, VkDeviceSize const* pOffsets),                \
     (vkCmdBindVertexBuffers, void, VkCommandBuffer , uint32_t , uint32_t , VkBuffer const*, VkDeviceSize const*),\
     (vkCmdBindVertexBuffers, void, commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets) )


#define vkCmdDraw_define \
     (vkCmdDraw, void, (VkCommandBuffer  commandBuffer, uint32_t  vertexCount, uint32_t  instanceCount, uint32_t  firstVertex, uint32_t  firstInstance),                \
     (vkCmdDraw, void, VkCommandBuffer , uint32_t , uint32_t , uint32_t , uint32_t ),\
     (vkCmdDraw, void, commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance) )


#define vkCmdDrawIndexed_define \
     (vkCmdDrawIndexed, void, (VkCommandBuffer  commandBuffer, uint32_t  indexCount, uint32_t  instanceCount, uint32_t  firstIndex, int32_t  vertexOffset, uint32_t  firstInstance),                \
     (vkCmdDrawIndexed, void, VkCommandBuffer , uint32_t , uint32_t , uint32_t , int32_t , uint32_t ),\
     (vkCmdDrawIndexed, void, commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance) )


#define vkCmdDrawIndirect_define \
     (vkCmdDrawIndirect, void, (VkCommandBuffer  commandBuffer, VkBuffer  buffer, VkDeviceSize  offset, uint32_t  drawCount, uint32_t  stride),                \
     (vkCmdDrawIndirect, void, VkCommandBuffer , VkBuffer , VkDeviceSize , uint32_t , uint32_t ),\
     (vkCmdDrawIndirect, void, commandBuffer, buffer, offset, drawCount, stride) )


#define vkCmdDrawIndexedIndirect_define \
     (vkCmdDrawIndexedIndirect, void, (VkCommandBuffer  commandBuffer, VkBuffer  buffer, VkDeviceSize  offset, uint32_t  drawCount, uint32_t  stride),                \
     (vkCmdDrawIndexedIndirect, void, VkCommandBuffer , VkBuffer , VkDeviceSize , uint32_t , uint32_t ),\
     (vkCmdDrawIndexedIndirect, void, commandBuffer, buffer, offset, drawCount, stride) )


#define vkCmdDispatch_define \
     (vkCmdDispatch, void, (VkCommandBuffer  commandBuffer, uint32_t  groupCountX, uint32_t  groupCountY, uint32_t  groupCountZ),                \
     (vkCmdDispatch, void, VkCommandBuffer , uint32_t , uint32_t , uint32_t ),\
     (vkCmdDispatch, void, commandBuffer, groupCountX, groupCountY, groupCountZ) )


#define vkCmdDispatchIndirect_define \
     (vkCmdDispatchIndirect, void, (VkCommandBuffer  commandBuffer, VkBuffer  buffer, VkDeviceSize  offset),                \
     (vkCmdDispatchIndirect, void, VkCommandBuffer , VkBuffer , VkDeviceSize ),\
     (vkCmdDispatchIndirect, void, commandBuffer, buffer, offset) )


#define vkCmdCopyBuffer_define \
     (vkCmdCopyBuffer, void, (VkCommandBuffer  commandBuffer, VkBuffer  srcBuffer, VkBuffer  dstBuffer, uint32_t  regionCount, VkBufferCopy const* pRegions),                \
     (vkCmdCopyBuffer, void, VkCommandBuffer , VkBuffer , VkBuffer , uint32_t , VkBufferCopy const*),\
     (vkCmdCopyBuffer, void, commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions) )


#define vkCmdCopyImage_define \
     (vkCmdCopyImage, void, (VkCommandBuffer  commandBuffer, VkImage  srcImage, VkImageLayout  srcImageLayout, VkImage  dstImage, VkImageLayout  dstImageLayout, uint32_t  regionCount, VkImageCopy const* pRegions),                \
     (vkCmdCopyImage, void, VkCommandBuffer , VkImage , VkImageLayout , VkImage , VkImageLayout , uint32_t , VkImageCopy const*),\
     (vkCmdCopyImage, void, commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions) )


#define vkCmdBlitImage_define \
     (vkCmdBlitImage, void, (VkCommandBuffer  commandBuffer, VkImage  srcImage, VkImageLayout  srcImageLayout, VkImage  dstImage, VkImageLayout  dstImageLayout, uint32_t  regionCount, VkImageBlit const* pRegions, VkFilter  filter),                \
     (vkCmdBlitImage, void, VkCommandBuffer , VkImage , VkImageLayout , VkImage , VkImageLayout , uint32_t , VkImageBlit const*, VkFilter ),\
     (vkCmdBlitImage, void, commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter) )


#define vkCmdCopyBufferToImage_define \
     (vkCmdCopyBufferToImage, void, (VkCommandBuffer  commandBuffer, VkBuffer  srcBuffer, VkImage  dstImage, VkImageLayout  dstImageLayout, uint32_t  regionCount, VkBufferImageCopy const* pRegions),                \
     (vkCmdCopyBufferToImage, void, VkCommandBuffer , VkBuffer , VkImage , VkImageLayout , uint32_t , VkBufferImageCopy const*),\
     (vkCmdCopyBufferToImage, void, commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions) )


#define vkCmdCopyImageToBuffer_define \
     (vkCmdCopyImageToBuffer, void, (VkCommandBuffer  commandBuffer, VkImage  srcImage, VkImageLayout  srcImageLayout, VkBuffer  dstBuffer, uint32_t  regionCount, VkBufferImageCopy const* pRegions),                \
     (vkCmdCopyImageToBuffer, void, VkCommandBuffer , VkImage , VkImageLayout , VkBuffer , uint32_t , VkBufferImageCopy const*),\
     (vkCmdCopyImageToBuffer, void, commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions) )


#define vkCmdUpdateBuffer_define \
     (vkCmdUpdateBuffer, void, (VkCommandBuffer  commandBuffer, VkBuffer  dstBuffer, VkDeviceSize  dstOffset, VkDeviceSize  dataSize, void const* pData),                \
     (vkCmdUpdateBuffer, void, VkCommandBuffer , VkBuffer , VkDeviceSize , VkDeviceSize , void const*),\
     (vkCmdUpdateBuffer, void, commandBuffer, dstBuffer, dstOffset, dataSize, pData) )


#define vkCmdFillBuffer_define \
     (vkCmdFillBuffer, void, (VkCommandBuffer  commandBuffer, VkBuffer  dstBuffer, VkDeviceSize  dstOffset, VkDeviceSize  size, uint32_t  data),                \
     (vkCmdFillBuffer, void, VkCommandBuffer , VkBuffer , VkDeviceSize , VkDeviceSize , uint32_t ),\
     (vkCmdFillBuffer, void, commandBuffer, dstBuffer, dstOffset, size, data) )


#define vkCmdClearColorImage_define \
     (vkCmdClearColorImage, void, (VkCommandBuffer  commandBuffer, VkImage  image, VkImageLayout  imageLayout, VkClearColorValue const* pColor, uint32_t  rangeCount, VkImageSubresourceRange const* pRanges),                \
     (vkCmdClearColorImage, void, VkCommandBuffer , VkImage , VkImageLayout , VkClearColorValue const*, uint32_t , VkImageSubresourceRange const*),\
     (vkCmdClearColorImage, void, commandBuffer, image, imageLayout, pColor, rangeCount, pRanges) )


#define vkCmdClearDepthStencilImage_define \
     (vkCmdClearDepthStencilImage, void, (VkCommandBuffer  commandBuffer, VkImage  image, VkImageLayout  imageLayout, VkClearDepthStencilValue const* pDepthStencil, uint32_t  rangeCount, VkImageSubresourceRange const* pRanges),                \
     (vkCmdClearDepthStencilImage, void, VkCommandBuffer , VkImage , VkImageLayout , VkClearDepthStencilValue const*, uint32_t , VkImageSubresourceRange const*),\
     (vkCmdClearDepthStencilImage, void, commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges) )


#define vkCmdClearAttachments_define \
     (vkCmdClearAttachments, void, (VkCommandBuffer  commandBuffer, uint32_t  attachmentCount, VkClearAttachment const* pAttachments, uint32_t  rectCount, VkClearRect const* pRects),                \
     (vkCmdClearAttachments, void, VkCommandBuffer , uint32_t , VkClearAttachment const*, uint32_t , VkClearRect const*),\
     (vkCmdClearAttachments, void, commandBuffer, attachmentCount, pAttachments, rectCount, pRects) )


#define vkCmdResolveImage_define \
     (vkCmdResolveImage, void, (VkCommandBuffer  commandBuffer, VkImage  srcImage, VkImageLayout  srcImageLayout, VkImage  dstImage, VkImageLayout  dstImageLayout, uint32_t  regionCount, VkImageResolve const* pRegions),                \
     (vkCmdResolveImage, void, VkCommandBuffer , VkImage , VkImageLayout , VkImage , VkImageLayout , uint32_t , VkImageResolve const*),\
     (vkCmdResolveImage, void, commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions) )


#define vkCmdSetEvent_define \
     (vkCmdSetEvent, void, (VkCommandBuffer  commandBuffer, VkEvent  event, VkPipelineStageFlags  stageMask),                \
     (vkCmdSetEvent, void, VkCommandBuffer , VkEvent , VkPipelineStageFlags ),\
     (vkCmdSetEvent, void, commandBuffer, event, stageMask) )


#define vkCmdResetEvent_define \
     (vkCmdResetEvent, void, (VkCommandBuffer  commandBuffer, VkEvent  event, VkPipelineStageFlags  stageMask),                \
     (vkCmdResetEvent, void, VkCommandBuffer , VkEvent , VkPipelineStageFlags ),\
     (vkCmdResetEvent, void, commandBuffer, event, stageMask) )


#define vkCmdWaitEvents_define \
     (vkCmdWaitEvents, void, (VkCommandBuffer  commandBuffer, uint32_t  eventCount, VkEvent const* pEvents, VkPipelineStageFlags  srcStageMask, VkPipelineStageFlags  dstStageMask, uint32_t  memoryBarrierCount, VkMemoryBarrier const* pMemoryBarriers, uint32_t  bufferMemoryBarrierCount, VkBufferMemoryBarrier const* pBufferMemoryBarriers, uint32_t  imageMemoryBarrierCount, VkImageMemoryBarrier const* pImageMemoryBarriers),                \
     (vkCmdWaitEvents, void, VkCommandBuffer , uint32_t , VkEvent const*, VkPipelineStageFlags , VkPipelineStageFlags , uint32_t , VkMemoryBarrier const*, uint32_t , VkBufferMemoryBarrier const*, uint32_t , VkImageMemoryBarrier const*),\
     (vkCmdWaitEvents, void, commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) )


#define vkCmdPipelineBarrier_define \
     (vkCmdPipelineBarrier, void, (VkCommandBuffer  commandBuffer, VkPipelineStageFlags  srcStageMask, VkPipelineStageFlags  dstStageMask, VkDependencyFlags  dependencyFlags, uint32_t  memoryBarrierCount, VkMemoryBarrier const* pMemoryBarriers, uint32_t  bufferMemoryBarrierCount, VkBufferMemoryBarrier const* pBufferMemoryBarriers, uint32_t  imageMemoryBarrierCount, VkImageMemoryBarrier const* pImageMemoryBarriers),                \
     (vkCmdPipelineBarrier, void, VkCommandBuffer , VkPipelineStageFlags , VkPipelineStageFlags , VkDependencyFlags , uint32_t , VkMemoryBarrier const*, uint32_t , VkBufferMemoryBarrier const*, uint32_t , VkImageMemoryBarrier const*),\
     (vkCmdPipelineBarrier, void, commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers) )


#define vkCmdBeginQuery_define \
     (vkCmdBeginQuery, void, (VkCommandBuffer  commandBuffer, VkQueryPool  queryPool, uint32_t  query, VkQueryControlFlags  flags),                \
     (vkCmdBeginQuery, void, VkCommandBuffer , VkQueryPool , uint32_t , VkQueryControlFlags ),\
     (vkCmdBeginQuery, void, commandBuffer, queryPool, query, flags) )


#define vkCmdEndQuery_define \
     (vkCmdEndQuery, void, (VkCommandBuffer  commandBuffer, VkQueryPool  queryPool, uint32_t  query),                \
     (vkCmdEndQuery, void, VkCommandBuffer , VkQueryPool , uint32_t ),\
     (vkCmdEndQuery, void, commandBuffer, queryPool, query) )


#define vkCmdResetQueryPool_define \
     (vkCmdResetQueryPool, void, (VkCommandBuffer  commandBuffer, VkQueryPool  queryPool, uint32_t  firstQuery, uint32_t  queryCount),                \
     (vkCmdResetQueryPool, void, VkCommandBuffer , VkQueryPool , uint32_t , uint32_t ),\
     (vkCmdResetQueryPool, void, commandBuffer, queryPool, firstQuery, queryCount) )


#define vkCmdWriteTimestamp_define \
     (vkCmdWriteTimestamp, void, (VkCommandBuffer  commandBuffer, VkPipelineStageFlagBits  pipelineStage, VkQueryPool  queryPool, uint32_t  query),                \
     (vkCmdWriteTimestamp, void, VkCommandBuffer , VkPipelineStageFlagBits , VkQueryPool , uint32_t ),\
     (vkCmdWriteTimestamp, void, commandBuffer, pipelineStage, queryPool, query) )


#define vkCmdCopyQueryPoolResults_define \
     (vkCmdCopyQueryPoolResults, void, (VkCommandBuffer  commandBuffer, VkQueryPool  queryPool, uint32_t  firstQuery, uint32_t  queryCount, VkBuffer  dstBuffer, VkDeviceSize  dstOffset, VkDeviceSize  stride, VkQueryResultFlags  flags),                \
     (vkCmdCopyQueryPoolResults, void, VkCommandBuffer , VkQueryPool , uint32_t , uint32_t , VkBuffer , VkDeviceSize , VkDeviceSize , VkQueryResultFlags ),\
     (vkCmdCopyQueryPoolResults, void, commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags) )


#define vkCmdPushConstants_define \
     (vkCmdPushConstants, void, (VkCommandBuffer  commandBuffer, VkPipelineLayout  layout, VkShaderStageFlags  stageFlags, uint32_t  offset, uint32_t  size, void const* pValues),                \
     (vkCmdPushConstants, void, VkCommandBuffer , VkPipelineLayout , VkShaderStageFlags , uint32_t , uint32_t , void const*),\
     (vkCmdPushConstants, void, commandBuffer, layout, stageFlags, offset, size, pValues) )


#define vkCmdBeginRenderPass_define \
     (vkCmdBeginRenderPass, void, (VkCommandBuffer  commandBuffer, VkRenderPassBeginInfo const* pRenderPassBegin, VkSubpassContents  contents),                \
     (vkCmdBeginRenderPass, void, VkCommandBuffer , VkRenderPassBeginInfo const*, VkSubpassContents ),\
     (vkCmdBeginRenderPass, void, commandBuffer, pRenderPassBegin, contents) )


#define vkCmdNextSubpass_define \
     (vkCmdNextSubpass, void, (VkCommandBuffer  commandBuffer, VkSubpassContents  contents),                \
     (vkCmdNextSubpass, void, VkCommandBuffer , VkSubpassContents ),\
     (vkCmdNextSubpass, void, commandBuffer, contents) )


#define vkCmdEndRenderPass_define \
     (vkCmdEndRenderPass, void, (VkCommandBuffer  commandBuffer),                \
     (vkCmdEndRenderPass, void, VkCommandBuffer ),\
     (vkCmdEndRenderPass, void, commandBuffer) )


#define vkCmdExecuteCommands_define \
     (vkCmdExecuteCommands, void, (VkCommandBuffer  commandBuffer, uint32_t  commandBufferCount, VkCommandBuffer const* pCommandBuffers),                \
     (vkCmdExecuteCommands, void, VkCommandBuffer , uint32_t , VkCommandBuffer const*),\
     (vkCmdExecuteCommands, void, commandBuffer, commandBufferCount, pCommandBuffers) )



	// VK_VERSION_1_1
#define vkBindBufferMemory2_define \
     (vkBindBufferMemory2, VkResult, (VkDevice  device, uint32_t  bindInfoCount, VkBindBufferMemoryInfo const* pBindInfos),                \
     (vkBindBufferMemory2, VkResult, VkDevice , uint32_t , VkBindBufferMemoryInfo const*),\
     (vkBindBufferMemory2, VkResult, device, bindInfoCount, pBindInfos) )


#define vkBindImageMemory2_define \
     (vkBindImageMemory2, VkResult, (VkDevice  device, uint32_t  bindInfoCount, VkBindImageMemoryInfo const* pBindInfos),                \
     (vkBindImageMemory2, VkResult, VkDevice , uint32_t , VkBindImageMemoryInfo const*),\
     (vkBindImageMemory2, VkResult, device, bindInfoCount, pBindInfos) )


#define vkGetDeviceGroupPeerMemoryFeatures_define \
     (vkGetDeviceGroupPeerMemoryFeatures, void, (VkDevice  device, uint32_t  heapIndex, uint32_t  localDeviceIndex, uint32_t  remoteDeviceIndex, VkPeerMemoryFeatureFlags * pPeerMemoryFeatures),                \
     (vkGetDeviceGroupPeerMemoryFeatures, void, VkDevice , uint32_t , uint32_t , uint32_t , VkPeerMemoryFeatureFlags *),\
     (vkGetDeviceGroupPeerMemoryFeatures, void, device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures) )


#define vkCmdSetDeviceMask_define \
     (vkCmdSetDeviceMask, void, (VkCommandBuffer  commandBuffer, uint32_t  deviceMask),                \
     (vkCmdSetDeviceMask, void, VkCommandBuffer , uint32_t ),\
     (vkCmdSetDeviceMask, void, commandBuffer, deviceMask) )


#define vkCmdDispatchBase_define \
     (vkCmdDispatchBase, void, (VkCommandBuffer  commandBuffer, uint32_t  baseGroupX, uint32_t  baseGroupY, uint32_t  baseGroupZ, uint32_t  groupCountX, uint32_t  groupCountY, uint32_t  groupCountZ),                \
     (vkCmdDispatchBase, void, VkCommandBuffer , uint32_t , uint32_t , uint32_t , uint32_t , uint32_t , uint32_t ),\
     (vkCmdDispatchBase, void, commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ) )


#define vkGetImageMemoryRequirements2_define \
     (vkGetImageMemoryRequirements2, void, (VkDevice  device, VkImageMemoryRequirementsInfo2 const* pInfo, VkMemoryRequirements2 * pMemoryRequirements),                \
     (vkGetImageMemoryRequirements2, void, VkDevice , VkImageMemoryRequirementsInfo2 const*, VkMemoryRequirements2 *),\
     (vkGetImageMemoryRequirements2, void, device, pInfo, pMemoryRequirements) )


#define vkGetBufferMemoryRequirements2_define \
     (vkGetBufferMemoryRequirements2, void, (VkDevice  device, VkBufferMemoryRequirementsInfo2 const* pInfo, VkMemoryRequirements2 * pMemoryRequirements),                \
     (vkGetBufferMemoryRequirements2, void, VkDevice , VkBufferMemoryRequirementsInfo2 const*, VkMemoryRequirements2 *),\
     (vkGetBufferMemoryRequirements2, void, device, pInfo, pMemoryRequirements) )


#define vkGetImageSparseMemoryRequirements2_define \
     (vkGetImageSparseMemoryRequirements2, void, (VkDevice  device, VkImageSparseMemoryRequirementsInfo2 const* pInfo, uint32_t * pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 * pSparseMemoryRequirements),                \
     (vkGetImageSparseMemoryRequirements2, void, VkDevice , VkImageSparseMemoryRequirementsInfo2 const*, uint32_t *, VkSparseImageMemoryRequirements2 *),\
     (vkGetImageSparseMemoryRequirements2, void, device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements) )


#define vkTrimCommandPool_define \
     (vkTrimCommandPool, void, (VkDevice  device, VkCommandPool  commandPool, VkCommandPoolTrimFlags  flags),                \
     (vkTrimCommandPool, void, VkDevice , VkCommandPool , VkCommandPoolTrimFlags ),\
     (vkTrimCommandPool, void, device, commandPool, flags) )


#define vkGetDeviceQueue2_define \
     (vkGetDeviceQueue2, void, (VkDevice  device, VkDeviceQueueInfo2 const* pQueueInfo, VkQueue * pQueue),                \
     (vkGetDeviceQueue2, void, VkDevice , VkDeviceQueueInfo2 const*, VkQueue *),\
     (vkGetDeviceQueue2, void, device, pQueueInfo, pQueue) )


#define vkCreateSamplerYcbcrConversion_define \
     (vkCreateSamplerYcbcrConversion, VkResult, (VkDevice  device, VkSamplerYcbcrConversionCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkSamplerYcbcrConversion * pYcbcrConversion),                \
     (vkCreateSamplerYcbcrConversion, VkResult, VkDevice , VkSamplerYcbcrConversionCreateInfo const*, VkAllocationCallbacks const*, VkSamplerYcbcrConversion *),\
     (vkCreateSamplerYcbcrConversion, VkResult, device, pCreateInfo, pAllocator, pYcbcrConversion) )


#define vkDestroySamplerYcbcrConversion_define \
     (vkDestroySamplerYcbcrConversion, void, (VkDevice  device, VkSamplerYcbcrConversion  ycbcrConversion, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroySamplerYcbcrConversion, void, VkDevice , VkSamplerYcbcrConversion , VkAllocationCallbacks const*),\
     (vkDestroySamplerYcbcrConversion, void, device, ycbcrConversion, pAllocator) )


#define vkCreateDescriptorUpdateTemplate_define \
     (vkCreateDescriptorUpdateTemplate, VkResult, (VkDevice  device, VkDescriptorUpdateTemplateCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkDescriptorUpdateTemplate * pDescriptorUpdateTemplate),                \
     (vkCreateDescriptorUpdateTemplate, VkResult, VkDevice , VkDescriptorUpdateTemplateCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorUpdateTemplate *),\
     (vkCreateDescriptorUpdateTemplate, VkResult, device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate) )


#define vkDestroyDescriptorUpdateTemplate_define \
     (vkDestroyDescriptorUpdateTemplate, void, (VkDevice  device, VkDescriptorUpdateTemplate  descriptorUpdateTemplate, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyDescriptorUpdateTemplate, void, VkDevice , VkDescriptorUpdateTemplate , VkAllocationCallbacks const*),\
     (vkDestroyDescriptorUpdateTemplate, void, device, descriptorUpdateTemplate, pAllocator) )


#define vkUpdateDescriptorSetWithTemplate_define \
     (vkUpdateDescriptorSetWithTemplate, void, (VkDevice  device, VkDescriptorSet  descriptorSet, VkDescriptorUpdateTemplate  descriptorUpdateTemplate, void const* pData),                \
     (vkUpdateDescriptorSetWithTemplate, void, VkDevice , VkDescriptorSet , VkDescriptorUpdateTemplate , void const*),\
     (vkUpdateDescriptorSetWithTemplate, void, device, descriptorSet, descriptorUpdateTemplate, pData) )


#define vkGetDescriptorSetLayoutSupport_define \
     (vkGetDescriptorSetLayoutSupport, void, (VkDevice  device, VkDescriptorSetLayoutCreateInfo const* pCreateInfo, VkDescriptorSetLayoutSupport * pSupport),                \
     (vkGetDescriptorSetLayoutSupport, void, VkDevice , VkDescriptorSetLayoutCreateInfo const*, VkDescriptorSetLayoutSupport *),\
     (vkGetDescriptorSetLayoutSupport, void, device, pCreateInfo, pSupport) )



	// VK_VERSION_1_2
#define vkCmdDrawIndirectCount_define \
     (vkCmdDrawIndirectCount, void, (VkCommandBuffer  commandBuffer, VkBuffer  buffer, VkDeviceSize  offset, VkBuffer  countBuffer, VkDeviceSize  countBufferOffset, uint32_t  maxDrawCount, uint32_t  stride),                \
     (vkCmdDrawIndirectCount, void, VkCommandBuffer , VkBuffer , VkDeviceSize , VkBuffer , VkDeviceSize , uint32_t , uint32_t ),\
     (vkCmdDrawIndirectCount, void, commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride) )


#define vkCmdDrawIndexedIndirectCount_define \
     (vkCmdDrawIndexedIndirectCount, void, (VkCommandBuffer  commandBuffer, VkBuffer  buffer, VkDeviceSize  offset, VkBuffer  countBuffer, VkDeviceSize  countBufferOffset, uint32_t  maxDrawCount, uint32_t  stride),                \
     (vkCmdDrawIndexedIndirectCount, void, VkCommandBuffer , VkBuffer , VkDeviceSize , VkBuffer , VkDeviceSize , uint32_t , uint32_t ),\
     (vkCmdDrawIndexedIndirectCount, void, commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride) )


#define vkCreateRenderPass2_define \
     (vkCreateRenderPass2, VkResult, (VkDevice  device, VkRenderPassCreateInfo2 const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkRenderPass * pRenderPass),                \
     (vkCreateRenderPass2, VkResult, VkDevice , VkRenderPassCreateInfo2 const*, VkAllocationCallbacks const*, VkRenderPass *),\
     (vkCreateRenderPass2, VkResult, device, pCreateInfo, pAllocator, pRenderPass) )


#define vkCmdBeginRenderPass2_define \
     (vkCmdBeginRenderPass2, void, (VkCommandBuffer  commandBuffer, VkRenderPassBeginInfo const* pRenderPassBegin, VkSubpassBeginInfo const* pSubpassBeginInfo),                \
     (vkCmdBeginRenderPass2, void, VkCommandBuffer , VkRenderPassBeginInfo const*, VkSubpassBeginInfo const*),\
     (vkCmdBeginRenderPass2, void, commandBuffer, pRenderPassBegin, pSubpassBeginInfo) )


#define vkCmdNextSubpass2_define \
     (vkCmdNextSubpass2, void, (VkCommandBuffer  commandBuffer, VkSubpassBeginInfo const* pSubpassBeginInfo, VkSubpassEndInfo const* pSubpassEndInfo),                \
     (vkCmdNextSubpass2, void, VkCommandBuffer , VkSubpassBeginInfo const*, VkSubpassEndInfo const*),\
     (vkCmdNextSubpass2, void, commandBuffer, pSubpassBeginInfo, pSubpassEndInfo) )


#define vkCmdEndRenderPass2_define \
     (vkCmdEndRenderPass2, void, (VkCommandBuffer  commandBuffer, VkSubpassEndInfo const* pSubpassEndInfo),                \
     (vkCmdEndRenderPass2, void, VkCommandBuffer , VkSubpassEndInfo const*),\
     (vkCmdEndRenderPass2, void, commandBuffer, pSubpassEndInfo) )


#define vkResetQueryPool_define \
     (vkResetQueryPool, void, (VkDevice  device, VkQueryPool  queryPool, uint32_t  firstQuery, uint32_t  queryCount),                \
     (vkResetQueryPool, void, VkDevice , VkQueryPool , uint32_t , uint32_t ),\
     (vkResetQueryPool, void, device, queryPool, firstQuery, queryCount) )


#define vkGetSemaphoreCounterValue_define \
     (vkGetSemaphoreCounterValue, VkResult, (VkDevice  device, VkSemaphore  semaphore, uint64_t * pValue),                \
     (vkGetSemaphoreCounterValue, VkResult, VkDevice , VkSemaphore , uint64_t *),\
     (vkGetSemaphoreCounterValue, VkResult, device, semaphore, pValue) )


#define vkWaitSemaphores_define \
     (vkWaitSemaphores, VkResult, (VkDevice  device, VkSemaphoreWaitInfo const* pWaitInfo, uint64_t  timeout),                \
     (vkWaitSemaphores, VkResult, VkDevice , VkSemaphoreWaitInfo const*, uint64_t ),\
     (vkWaitSemaphores, VkResult, device, pWaitInfo, timeout) )


#define vkSignalSemaphore_define \
     (vkSignalSemaphore, VkResult, (VkDevice  device, VkSemaphoreSignalInfo const* pSignalInfo),                \
     (vkSignalSemaphore, VkResult, VkDevice , VkSemaphoreSignalInfo const*),\
     (vkSignalSemaphore, VkResult, device, pSignalInfo) )


#define vkGetBufferDeviceAddress_define \
     (vkGetBufferDeviceAddress, VkDeviceAddress, (VkDevice  device, VkBufferDeviceAddressInfo const* pInfo),                \
     (vkGetBufferDeviceAddress, VkDeviceAddress, VkDevice , VkBufferDeviceAddressInfo const*),\
     (vkGetBufferDeviceAddress, VkDeviceAddress, device, pInfo) )


#define vkGetBufferOpaqueCaptureAddress_define \
     (vkGetBufferOpaqueCaptureAddress, uint64_t, (VkDevice  device, VkBufferDeviceAddressInfo const* pInfo),                \
     (vkGetBufferOpaqueCaptureAddress, uint64_t, VkDevice , VkBufferDeviceAddressInfo const*),\
     (vkGetBufferOpaqueCaptureAddress, uint64_t, device, pInfo) )


#define vkGetDeviceMemoryOpaqueCaptureAddress_define \
     (vkGetDeviceMemoryOpaqueCaptureAddress, uint64_t, (VkDevice  device, VkDeviceMemoryOpaqueCaptureAddressInfo const* pInfo),                \
     (vkGetDeviceMemoryOpaqueCaptureAddress, uint64_t, VkDevice , VkDeviceMemoryOpaqueCaptureAddressInfo const*),\
     (vkGetDeviceMemoryOpaqueCaptureAddress, uint64_t, device, pInfo) )



	// VK_KHR_swapchain
#define vkCreateSwapchainKHR_define \
     (vkCreateSwapchainKHR, VkResult, (VkDevice  device, VkSwapchainCreateInfoKHR const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkSwapchainKHR * pSwapchain),                \
     (vkCreateSwapchainKHR, VkResult, VkDevice , VkSwapchainCreateInfoKHR const*, VkAllocationCallbacks const*, VkSwapchainKHR *),\
     (vkCreateSwapchainKHR, VkResult, device, pCreateInfo, pAllocator, pSwapchain) )


#define vkDestroySwapchainKHR_define \
     (vkDestroySwapchainKHR, void, (VkDevice  device, VkSwapchainKHR  swapchain, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroySwapchainKHR, void, VkDevice , VkSwapchainKHR , VkAllocationCallbacks const*),\
     (vkDestroySwapchainKHR, void, device, swapchain, pAllocator) )


#define vkGetSwapchainImagesKHR_define \
     (vkGetSwapchainImagesKHR, VkResult, (VkDevice  device, VkSwapchainKHR  swapchain, uint32_t * pSwapchainImageCount, VkImage * pSwapchainImages),                \
     (vkGetSwapchainImagesKHR, VkResult, VkDevice , VkSwapchainKHR , uint32_t *, VkImage *),\
     (vkGetSwapchainImagesKHR, VkResult, device, swapchain, pSwapchainImageCount, pSwapchainImages) )


#define vkAcquireNextImageKHR_define \
     (vkAcquireNextImageKHR, VkResult, (VkDevice  device, VkSwapchainKHR  swapchain, uint64_t  timeout, VkSemaphore  semaphore, VkFence  fence, uint32_t * pImageIndex),                \
     (vkAcquireNextImageKHR, VkResult, VkDevice , VkSwapchainKHR , uint64_t , VkSemaphore , VkFence , uint32_t *),\
     (vkAcquireNextImageKHR, VkResult, device, swapchain, timeout, semaphore, fence, pImageIndex) )


#define vkQueuePresentKHR_define \
     (vkQueuePresentKHR, VkResult, (VkQueue  queue, VkPresentInfoKHR const* pPresentInfo),                \
     (vkQueuePresentKHR, VkResult, VkQueue , VkPresentInfoKHR const*),\
     (vkQueuePresentKHR, VkResult, queue, pPresentInfo) )


#define vkGetDeviceGroupPresentCapabilitiesKHR_define \
     (vkGetDeviceGroupPresentCapabilitiesKHR, VkResult, (VkDevice  device, VkDeviceGroupPresentCapabilitiesKHR * pDeviceGroupPresentCapabilities),                \
     (vkGetDeviceGroupPresentCapabilitiesKHR, VkResult, VkDevice , VkDeviceGroupPresentCapabilitiesKHR *),\
     (vkGetDeviceGroupPresentCapabilitiesKHR, VkResult, device, pDeviceGroupPresentCapabilities) )


#define vkGetDeviceGroupSurfacePresentModesKHR_define \
     (vkGetDeviceGroupSurfacePresentModesKHR, VkResult, (VkDevice  device, VkSurfaceKHR  surface, VkDeviceGroupPresentModeFlagsKHR * pModes),                \
     (vkGetDeviceGroupSurfacePresentModesKHR, VkResult, VkDevice , VkSurfaceKHR , VkDeviceGroupPresentModeFlagsKHR *),\
     (vkGetDeviceGroupSurfacePresentModesKHR, VkResult, device, surface, pModes) )


#define vkAcquireNextImage2KHR_define \
     (vkAcquireNextImage2KHR, VkResult, (VkDevice  device, VkAcquireNextImageInfoKHR const* pAcquireInfo, uint32_t * pImageIndex),                \
     (vkAcquireNextImage2KHR, VkResult, VkDevice , VkAcquireNextImageInfoKHR const*, uint32_t *),\
     (vkAcquireNextImage2KHR, VkResult, device, pAcquireInfo, pImageIndex) )



	// VK_EXT_debug_marker
#define vkDebugMarkerSetObjectTagEXT_define \
     (vkDebugMarkerSetObjectTagEXT, VkResult, (VkDevice  device, VkDebugMarkerObjectTagInfoEXT const* pTagInfo),                \
     (vkDebugMarkerSetObjectTagEXT, VkResult, VkDevice , VkDebugMarkerObjectTagInfoEXT const*),\
     (vkDebugMarkerSetObjectTagEXT, VkResult, device, pTagInfo) )


#define vkDebugMarkerSetObjectNameEXT_define \
     (vkDebugMarkerSetObjectNameEXT, VkResult, (VkDevice  device, VkDebugMarkerObjectNameInfoEXT const* pNameInfo),                \
     (vkDebugMarkerSetObjectNameEXT, VkResult, VkDevice , VkDebugMarkerObjectNameInfoEXT const*),\
     (vkDebugMarkerSetObjectNameEXT, VkResult, device, pNameInfo) )


#define vkCmdDebugMarkerBeginEXT_define \
     (vkCmdDebugMarkerBeginEXT, void, (VkCommandBuffer  commandBuffer, VkDebugMarkerMarkerInfoEXT const* pMarkerInfo),                \
     (vkCmdDebugMarkerBeginEXT, void, VkCommandBuffer , VkDebugMarkerMarkerInfoEXT const*),\
     (vkCmdDebugMarkerBeginEXT, void, commandBuffer, pMarkerInfo) )


#define vkCmdDebugMarkerEndEXT_define \
     (vkCmdDebugMarkerEndEXT, void, (VkCommandBuffer  commandBuffer),                \
     (vkCmdDebugMarkerEndEXT, void, VkCommandBuffer ),\
     (vkCmdDebugMarkerEndEXT, void, commandBuffer) )


#define vkCmdDebugMarkerInsertEXT_define \
     (vkCmdDebugMarkerInsertEXT, void, (VkCommandBuffer  commandBuffer, VkDebugMarkerMarkerInfoEXT const* pMarkerInfo),                \
     (vkCmdDebugMarkerInsertEXT, void, VkCommandBuffer , VkDebugMarkerMarkerInfoEXT const*),\
     (vkCmdDebugMarkerInsertEXT, void, commandBuffer, pMarkerInfo) )



	// VK_EXT_transform_feedback
#define vkCmdBindTransformFeedbackBuffersEXT_define \
     (vkCmdBindTransformFeedbackBuffersEXT, void, (VkCommandBuffer  commandBuffer, uint32_t  firstBinding, uint32_t  bindingCount, VkBuffer const* pBuffers, VkDeviceSize const* pOffsets, VkDeviceSize const* pSizes),                \
     (vkCmdBindTransformFeedbackBuffersEXT, void, VkCommandBuffer , uint32_t , uint32_t , VkBuffer const*, VkDeviceSize const*, VkDeviceSize const*),\
     (vkCmdBindTransformFeedbackBuffersEXT, void, commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes) )


#define vkCmdBeginTransformFeedbackEXT_define \
     (vkCmdBeginTransformFeedbackEXT, void, (VkCommandBuffer  commandBuffer, uint32_t  firstCounterBuffer, uint32_t  counterBufferCount, VkBuffer const* pCounterBuffers, VkDeviceSize const* pCounterBufferOffsets),                \
     (vkCmdBeginTransformFeedbackEXT, void, VkCommandBuffer , uint32_t , uint32_t , VkBuffer const*, VkDeviceSize const*),\
     (vkCmdBeginTransformFeedbackEXT, void, commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets) )


#define vkCmdEndTransformFeedbackEXT_define \
     (vkCmdEndTransformFeedbackEXT, void, (VkCommandBuffer  commandBuffer, uint32_t  firstCounterBuffer, uint32_t  counterBufferCount, VkBuffer const* pCounterBuffers, VkDeviceSize const* pCounterBufferOffsets),                \
     (vkCmdEndTransformFeedbackEXT, void, VkCommandBuffer , uint32_t , uint32_t , VkBuffer const*, VkDeviceSize const*),\
     (vkCmdEndTransformFeedbackEXT, void, commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets) )


#define vkCmdBeginQueryIndexedEXT_define \
     (vkCmdBeginQueryIndexedEXT, void, (VkCommandBuffer  commandBuffer, VkQueryPool  queryPool, uint32_t  query, VkQueryControlFlags  flags, uint32_t  index),                \
     (vkCmdBeginQueryIndexedEXT, void, VkCommandBuffer , VkQueryPool , uint32_t , VkQueryControlFlags , uint32_t ),\
     (vkCmdBeginQueryIndexedEXT, void, commandBuffer, queryPool, query, flags, index) )


#define vkCmdEndQueryIndexedEXT_define \
     (vkCmdEndQueryIndexedEXT, void, (VkCommandBuffer  commandBuffer, VkQueryPool  queryPool, uint32_t  query, uint32_t  index),                \
     (vkCmdEndQueryIndexedEXT, void, VkCommandBuffer , VkQueryPool , uint32_t , uint32_t ),\
     (vkCmdEndQueryIndexedEXT, void, commandBuffer, queryPool, query, index) )


#define vkCmdDrawIndirectByteCountEXT_define \
     (vkCmdDrawIndirectByteCountEXT, void, (VkCommandBuffer  commandBuffer, uint32_t  instanceCount, uint32_t  firstInstance, VkBuffer  counterBuffer, VkDeviceSize  counterBufferOffset, uint32_t  counterOffset, uint32_t  vertexStride),                \
     (vkCmdDrawIndirectByteCountEXT, void, VkCommandBuffer , uint32_t , uint32_t , VkBuffer , VkDeviceSize , uint32_t , uint32_t ),\
     (vkCmdDrawIndirectByteCountEXT, void, commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride) )



	// VK_KHR_device_group
#define vkGetDeviceGroupPeerMemoryFeaturesKHR_define \
     (vkGetDeviceGroupPeerMemoryFeaturesKHR, void, (VkDevice  device, uint32_t  heapIndex, uint32_t  localDeviceIndex, uint32_t  remoteDeviceIndex, VkPeerMemoryFeatureFlags * pPeerMemoryFeatures),                \
     (vkGetDeviceGroupPeerMemoryFeaturesKHR, void, VkDevice , uint32_t , uint32_t , uint32_t , VkPeerMemoryFeatureFlags *),\
     (vkGetDeviceGroupPeerMemoryFeaturesKHR, void, device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures) )


#define vkCmdSetDeviceMaskKHR_define \
     (vkCmdSetDeviceMaskKHR, void, (VkCommandBuffer  commandBuffer, uint32_t  deviceMask),                \
     (vkCmdSetDeviceMaskKHR, void, VkCommandBuffer , uint32_t ),\
     (vkCmdSetDeviceMaskKHR, void, commandBuffer, deviceMask) )


#define vkCmdDispatchBaseKHR_define \
     (vkCmdDispatchBaseKHR, void, (VkCommandBuffer  commandBuffer, uint32_t  baseGroupX, uint32_t  baseGroupY, uint32_t  baseGroupZ, uint32_t  groupCountX, uint32_t  groupCountY, uint32_t  groupCountZ),                \
     (vkCmdDispatchBaseKHR, void, VkCommandBuffer , uint32_t , uint32_t , uint32_t , uint32_t , uint32_t , uint32_t ),\
     (vkCmdDispatchBaseKHR, void, commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ) )



	// VK_KHR_maintenance1
#define vkTrimCommandPoolKHR_define \
     (vkTrimCommandPoolKHR, void, (VkDevice  device, VkCommandPool  commandPool, VkCommandPoolTrimFlags  flags),                \
     (vkTrimCommandPoolKHR, void, VkDevice , VkCommandPool , VkCommandPoolTrimFlags ),\
     (vkTrimCommandPoolKHR, void, device, commandPool, flags) )



	// VK_KHR_external_memory_fd
#define vkGetMemoryFdKHR_define \
     (vkGetMemoryFdKHR, VkResult, (VkDevice  device, VkMemoryGetFdInfoKHR const* pGetFdInfo, int * pFd),                \
     (vkGetMemoryFdKHR, VkResult, VkDevice , VkMemoryGetFdInfoKHR const*, int *),\
     (vkGetMemoryFdKHR, VkResult, device, pGetFdInfo, pFd) )


#define vkGetMemoryFdPropertiesKHR_define \
     (vkGetMemoryFdPropertiesKHR, VkResult, (VkDevice  device, VkExternalMemoryHandleTypeFlagBits  handleType, int  fd, VkMemoryFdPropertiesKHR * pMemoryFdProperties),                \
     (vkGetMemoryFdPropertiesKHR, VkResult, VkDevice , VkExternalMemoryHandleTypeFlagBits , int , VkMemoryFdPropertiesKHR *),\
     (vkGetMemoryFdPropertiesKHR, VkResult, device, handleType, fd, pMemoryFdProperties) )



	// VK_KHR_external_semaphore_fd
#define vkImportSemaphoreFdKHR_define \
     (vkImportSemaphoreFdKHR, VkResult, (VkDevice  device, VkImportSemaphoreFdInfoKHR const* pImportSemaphoreFdInfo),                \
     (vkImportSemaphoreFdKHR, VkResult, VkDevice , VkImportSemaphoreFdInfoKHR const*),\
     (vkImportSemaphoreFdKHR, VkResult, device, pImportSemaphoreFdInfo) )


#define vkGetSemaphoreFdKHR_define \
     (vkGetSemaphoreFdKHR, VkResult, (VkDevice  device, VkSemaphoreGetFdInfoKHR const* pGetFdInfo, int * pFd),                \
     (vkGetSemaphoreFdKHR, VkResult, VkDevice , VkSemaphoreGetFdInfoKHR const*, int *),\
     (vkGetSemaphoreFdKHR, VkResult, device, pGetFdInfo, pFd) )



	// VK_KHR_push_descriptor
#define vkCmdPushDescriptorSetKHR_define \
     (vkCmdPushDescriptorSetKHR, void, (VkCommandBuffer  commandBuffer, VkPipelineBindPoint  pipelineBindPoint, VkPipelineLayout  layout, uint32_t  set, uint32_t  descriptorWriteCount, VkWriteDescriptorSet const* pDescriptorWrites),                \
     (vkCmdPushDescriptorSetKHR, void, VkCommandBuffer , VkPipelineBindPoint , VkPipelineLayout , uint32_t , uint32_t , VkWriteDescriptorSet const*),\
     (vkCmdPushDescriptorSetKHR, void, commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites) )


#define vkCmdPushDescriptorSetWithTemplateKHR_define \
     (vkCmdPushDescriptorSetWithTemplateKHR, void, (VkCommandBuffer  commandBuffer, VkDescriptorUpdateTemplate  descriptorUpdateTemplate, VkPipelineLayout  layout, uint32_t  set, void const* pData),                \
     (vkCmdPushDescriptorSetWithTemplateKHR, void, VkCommandBuffer , VkDescriptorUpdateTemplate , VkPipelineLayout , uint32_t , void const*),\
     (vkCmdPushDescriptorSetWithTemplateKHR, void, commandBuffer, descriptorUpdateTemplate, layout, set, pData) )



	// VK_KHR_descriptor_update_template
#define vkCreateDescriptorUpdateTemplateKHR_define \
     (vkCreateDescriptorUpdateTemplateKHR, VkResult, (VkDevice  device, VkDescriptorUpdateTemplateCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkDescriptorUpdateTemplate * pDescriptorUpdateTemplate),                \
     (vkCreateDescriptorUpdateTemplateKHR, VkResult, VkDevice , VkDescriptorUpdateTemplateCreateInfo const*, VkAllocationCallbacks const*, VkDescriptorUpdateTemplate *),\
     (vkCreateDescriptorUpdateTemplateKHR, VkResult, device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate) )


#define vkDestroyDescriptorUpdateTemplateKHR_define \
     (vkDestroyDescriptorUpdateTemplateKHR, void, (VkDevice  device, VkDescriptorUpdateTemplate  descriptorUpdateTemplate, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyDescriptorUpdateTemplateKHR, void, VkDevice , VkDescriptorUpdateTemplate , VkAllocationCallbacks const*),\
     (vkDestroyDescriptorUpdateTemplateKHR, void, device, descriptorUpdateTemplate, pAllocator) )


#define vkUpdateDescriptorSetWithTemplateKHR_define \
     (vkUpdateDescriptorSetWithTemplateKHR, void, (VkDevice  device, VkDescriptorSet  descriptorSet, VkDescriptorUpdateTemplate  descriptorUpdateTemplate, void const* pData),                \
     (vkUpdateDescriptorSetWithTemplateKHR, void, VkDevice , VkDescriptorSet , VkDescriptorUpdateTemplate , void const*),\
     (vkUpdateDescriptorSetWithTemplateKHR, void, device, descriptorSet, descriptorUpdateTemplate, pData) )



	// VK_GOOGLE_display_timing
#define vkGetRefreshCycleDurationGOOGLE_define \
     (vkGetRefreshCycleDurationGOOGLE, VkResult, (VkDevice  device, VkSwapchainKHR  swapchain, VkRefreshCycleDurationGOOGLE * pDisplayTimingProperties),                \
     (vkGetRefreshCycleDurationGOOGLE, VkResult, VkDevice , VkSwapchainKHR , VkRefreshCycleDurationGOOGLE *),\
     (vkGetRefreshCycleDurationGOOGLE, VkResult, device, swapchain, pDisplayTimingProperties) )


#define vkGetPastPresentationTimingGOOGLE_define \
     (vkGetPastPresentationTimingGOOGLE, VkResult, (VkDevice  device, VkSwapchainKHR  swapchain, uint32_t * pPresentationTimingCount, VkPastPresentationTimingGOOGLE * pPresentationTimings),                \
     (vkGetPastPresentationTimingGOOGLE, VkResult, VkDevice , VkSwapchainKHR , uint32_t *, VkPastPresentationTimingGOOGLE *),\
     (vkGetPastPresentationTimingGOOGLE, VkResult, device, swapchain, pPresentationTimingCount, pPresentationTimings) )



	// VK_EXT_hdr_metadata
#define vkSetHdrMetadataEXT_define \
     (vkSetHdrMetadataEXT, void, (VkDevice  device, uint32_t  swapchainCount, VkSwapchainKHR const* pSwapchains, VkHdrMetadataEXT const* pMetadata),                \
     (vkSetHdrMetadataEXT, void, VkDevice , uint32_t , VkSwapchainKHR const*, VkHdrMetadataEXT const*),\
     (vkSetHdrMetadataEXT, void, device, swapchainCount, pSwapchains, pMetadata) )



	// VK_KHR_create_renderpass2
#define vkCreateRenderPass2KHR_define \
     (vkCreateRenderPass2KHR, VkResult, (VkDevice  device, VkRenderPassCreateInfo2 const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkRenderPass * pRenderPass),                \
     (vkCreateRenderPass2KHR, VkResult, VkDevice , VkRenderPassCreateInfo2 const*, VkAllocationCallbacks const*, VkRenderPass *),\
     (vkCreateRenderPass2KHR, VkResult, device, pCreateInfo, pAllocator, pRenderPass) )


#define vkCmdBeginRenderPass2KHR_define \
     (vkCmdBeginRenderPass2KHR, void, (VkCommandBuffer  commandBuffer, VkRenderPassBeginInfo const* pRenderPassBegin, VkSubpassBeginInfo const* pSubpassBeginInfo),                \
     (vkCmdBeginRenderPass2KHR, void, VkCommandBuffer , VkRenderPassBeginInfo const*, VkSubpassBeginInfo const*),\
     (vkCmdBeginRenderPass2KHR, void, commandBuffer, pRenderPassBegin, pSubpassBeginInfo) )


#define vkCmdNextSubpass2KHR_define \
     (vkCmdNextSubpass2KHR, void, (VkCommandBuffer  commandBuffer, VkSubpassBeginInfo const* pSubpassBeginInfo, VkSubpassEndInfo const* pSubpassEndInfo),                \
     (vkCmdNextSubpass2KHR, void, VkCommandBuffer , VkSubpassBeginInfo const*, VkSubpassEndInfo const*),\
     (vkCmdNextSubpass2KHR, void, commandBuffer, pSubpassBeginInfo, pSubpassEndInfo) )


#define vkCmdEndRenderPass2KHR_define \
     (vkCmdEndRenderPass2KHR, void, (VkCommandBuffer  commandBuffer, VkSubpassEndInfo const* pSubpassEndInfo),                \
     (vkCmdEndRenderPass2KHR, void, VkCommandBuffer , VkSubpassEndInfo const*),\
     (vkCmdEndRenderPass2KHR, void, commandBuffer, pSubpassEndInfo) )



	// VK_KHR_shared_presentable_image
#define vkGetSwapchainStatusKHR_define \
     (vkGetSwapchainStatusKHR, VkResult, (VkDevice  device, VkSwapchainKHR  swapchain),                \
     (vkGetSwapchainStatusKHR, VkResult, VkDevice , VkSwapchainKHR ),\
     (vkGetSwapchainStatusKHR, VkResult, device, swapchain) )



	// VK_KHR_external_fence_fd
#define vkImportFenceFdKHR_define \
     (vkImportFenceFdKHR, VkResult, (VkDevice  device, VkImportFenceFdInfoKHR const* pImportFenceFdInfo),                \
     (vkImportFenceFdKHR, VkResult, VkDevice , VkImportFenceFdInfoKHR const*),\
     (vkImportFenceFdKHR, VkResult, device, pImportFenceFdInfo) )


#define vkGetFenceFdKHR_define \
     (vkGetFenceFdKHR, VkResult, (VkDevice  device, VkFenceGetFdInfoKHR const* pGetFdInfo, int * pFd),                \
     (vkGetFenceFdKHR, VkResult, VkDevice , VkFenceGetFdInfoKHR const*, int *),\
     (vkGetFenceFdKHR, VkResult, device, pGetFdInfo, pFd) )



	// VK_EXT_sample_locations
#define vkCmdSetSampleLocationsEXT_define \
     (vkCmdSetSampleLocationsEXT, void, (VkCommandBuffer  commandBuffer, VkSampleLocationsInfoEXT const* pSampleLocationsInfo),                \
     (vkCmdSetSampleLocationsEXT, void, VkCommandBuffer , VkSampleLocationsInfoEXT const*),\
     (vkCmdSetSampleLocationsEXT, void, commandBuffer, pSampleLocationsInfo) )



	// VK_KHR_get_memory_requirements2
#define vkGetImageMemoryRequirements2KHR_define \
     (vkGetImageMemoryRequirements2KHR, void, (VkDevice  device, VkImageMemoryRequirementsInfo2 const* pInfo, VkMemoryRequirements2 * pMemoryRequirements),                \
     (vkGetImageMemoryRequirements2KHR, void, VkDevice , VkImageMemoryRequirementsInfo2 const*, VkMemoryRequirements2 *),\
     (vkGetImageMemoryRequirements2KHR, void, device, pInfo, pMemoryRequirements) )


#define vkGetBufferMemoryRequirements2KHR_define \
     (vkGetBufferMemoryRequirements2KHR, void, (VkDevice  device, VkBufferMemoryRequirementsInfo2 const* pInfo, VkMemoryRequirements2 * pMemoryRequirements),                \
     (vkGetBufferMemoryRequirements2KHR, void, VkDevice , VkBufferMemoryRequirementsInfo2 const*, VkMemoryRequirements2 *),\
     (vkGetBufferMemoryRequirements2KHR, void, device, pInfo, pMemoryRequirements) )


#define vkGetImageSparseMemoryRequirements2KHR_define \
     (vkGetImageSparseMemoryRequirements2KHR, void, (VkDevice  device, VkImageSparseMemoryRequirementsInfo2 const* pInfo, uint32_t * pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2 * pSparseMemoryRequirements),                \
     (vkGetImageSparseMemoryRequirements2KHR, void, VkDevice , VkImageSparseMemoryRequirementsInfo2 const*, uint32_t *, VkSparseImageMemoryRequirements2 *),\
     (vkGetImageSparseMemoryRequirements2KHR, void, device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements) )



	// VK_KHR_sampler_ycbcr_conversion
#define vkCreateSamplerYcbcrConversionKHR_define \
     (vkCreateSamplerYcbcrConversionKHR, VkResult, (VkDevice  device, VkSamplerYcbcrConversionCreateInfo const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkSamplerYcbcrConversion * pYcbcrConversion),                \
     (vkCreateSamplerYcbcrConversionKHR, VkResult, VkDevice , VkSamplerYcbcrConversionCreateInfo const*, VkAllocationCallbacks const*, VkSamplerYcbcrConversion *),\
     (vkCreateSamplerYcbcrConversionKHR, VkResult, device, pCreateInfo, pAllocator, pYcbcrConversion) )


#define vkDestroySamplerYcbcrConversionKHR_define \
     (vkDestroySamplerYcbcrConversionKHR, void, (VkDevice  device, VkSamplerYcbcrConversion  ycbcrConversion, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroySamplerYcbcrConversionKHR, void, VkDevice , VkSamplerYcbcrConversion , VkAllocationCallbacks const*),\
     (vkDestroySamplerYcbcrConversionKHR, void, device, ycbcrConversion, pAllocator) )



	// VK_KHR_bind_memory2
#define vkBindBufferMemory2KHR_define \
     (vkBindBufferMemory2KHR, VkResult, (VkDevice  device, uint32_t  bindInfoCount, VkBindBufferMemoryInfo const* pBindInfos),                \
     (vkBindBufferMemory2KHR, VkResult, VkDevice , uint32_t , VkBindBufferMemoryInfo const*),\
     (vkBindBufferMemory2KHR, VkResult, device, bindInfoCount, pBindInfos) )


#define vkBindImageMemory2KHR_define \
     (vkBindImageMemory2KHR, VkResult, (VkDevice  device, uint32_t  bindInfoCount, VkBindImageMemoryInfo const* pBindInfos),                \
     (vkBindImageMemory2KHR, VkResult, VkDevice , uint32_t , VkBindImageMemoryInfo const*),\
     (vkBindImageMemory2KHR, VkResult, device, bindInfoCount, pBindInfos) )



	// VK_EXT_validation_cache
#define vkCreateValidationCacheEXT_define \
     (vkCreateValidationCacheEXT, VkResult, (VkDevice  device, VkValidationCacheCreateInfoEXT const* pCreateInfo, VkAllocationCallbacks const* pAllocator, VkValidationCacheEXT * pValidationCache),                \
     (vkCreateValidationCacheEXT, VkResult, VkDevice , VkValidationCacheCreateInfoEXT const*, VkAllocationCallbacks const*, VkValidationCacheEXT *),\
     (vkCreateValidationCacheEXT, VkResult, device, pCreateInfo, pAllocator, pValidationCache) )


#define vkDestroyValidationCacheEXT_define \
     (vkDestroyValidationCacheEXT, void, (VkDevice  device, VkValidationCacheEXT  validationCache, VkAllocationCallbacks const* pAllocator),                \
     (vkDestroyValidationCacheEXT, void, VkDevice , VkValidationCacheEXT , VkAllocationCallbacks const*),\
     (vkDestroyValidationCacheEXT, void, device, validationCache, pAllocator) )


#define vkMergeValidationCachesEXT_define \
     (vkMergeValidationCachesEXT, VkResult, (VkDevice  device, VkValidationCacheEXT  dstCache, uint32_t  srcCacheCount, VkValidationCacheEXT const* pSrcCaches),                \
     (vkMergeValidationCachesEXT, VkResult, VkDevice , VkValidationCacheEXT , uint32_t , VkValidationCacheEXT const*),\
     (vkMergeValidationCachesEXT, VkResult, device, dstCache, srcCacheCount, pSrcCaches) )


#define vkGetValidationCacheDataEXT_define \
     (vkGetValidationCacheDataEXT, VkResult, (VkDevice  device, VkValidationCacheEXT  validationCache, size_t * pDataSize, void * pData),                \
     (vkGetValidationCacheDataEXT, VkResult, VkDevice , VkValidationCacheEXT , size_t *, void *),\
     (vkGetValidationCacheDataEXT, VkResult, device, validationCache, pDataSize, pData) )



	// VK_KHR_maintenance3
#define vkGetDescriptorSetLayoutSupportKHR_define \
     (vkGetDescriptorSetLayoutSupportKHR, void, (VkDevice  device, VkDescriptorSetLayoutCreateInfo const* pCreateInfo, VkDescriptorSetLayoutSupport * pSupport),                \
     (vkGetDescriptorSetLayoutSupportKHR, void, VkDevice , VkDescriptorSetLayoutCreateInfo const*, VkDescriptorSetLayoutSupport *),\
     (vkGetDescriptorSetLayoutSupportKHR, void, device, pCreateInfo, pSupport) )



	// VK_KHR_draw_indirect_count
#define vkCmdDrawIndirectCountKHR_define \
     (vkCmdDrawIndirectCountKHR, void, (VkCommandBuffer  commandBuffer, VkBuffer  buffer, VkDeviceSize  offset, VkBuffer  countBuffer, VkDeviceSize  countBufferOffset, uint32_t  maxDrawCount, uint32_t  stride),                \
     (vkCmdDrawIndirectCountKHR, void, VkCommandBuffer , VkBuffer , VkDeviceSize , VkBuffer , VkDeviceSize , uint32_t , uint32_t ),\
     (vkCmdDrawIndirectCountKHR, void, commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride) )


#define vkCmdDrawIndexedIndirectCountKHR_define \
     (vkCmdDrawIndexedIndirectCountKHR, void, (VkCommandBuffer  commandBuffer, VkBuffer  buffer, VkDeviceSize  offset, VkBuffer  countBuffer, VkDeviceSize  countBufferOffset, uint32_t  maxDrawCount, uint32_t  stride),                \
     (vkCmdDrawIndexedIndirectCountKHR, void, VkCommandBuffer , VkBuffer , VkDeviceSize , VkBuffer , VkDeviceSize , uint32_t , uint32_t ),\
     (vkCmdDrawIndexedIndirectCountKHR, void, commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride) )



	// VK_KHR_fragment_shading_rate
#define vkCmdSetFragmentShadingRateKHR_define \
     (vkCmdSetFragmentShadingRateKHR, void, (VkCommandBuffer  commandBuffer, VkExtent2D const* pFragmentSize, VkFragmentShadingRateCombinerOpKHR const combinerOps[2]),                \
     (vkCmdSetFragmentShadingRateKHR, void, VkCommandBuffer , VkExtent2D const*, VkFragmentShadingRateCombinerOpKHR const[2]),\
     (vkCmdSetFragmentShadingRateKHR, void, commandBuffer, pFragmentSize, combinerOps) )



	// VK_EXT_line_rasterization
#define vkCmdSetLineStippleEXT_define \
     (vkCmdSetLineStippleEXT, void, (VkCommandBuffer  commandBuffer, uint32_t  lineStippleFactor, uint16_t  lineStipplePattern),                \
     (vkCmdSetLineStippleEXT, void, VkCommandBuffer , uint32_t , uint16_t ),\
     (vkCmdSetLineStippleEXT, void, commandBuffer, lineStippleFactor, lineStipplePattern) )





